{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li>Java Notes</li> <li>SL &amp; HL Units<ul> <li>01 Computational Thinking</li> <li>02 Problem-Solving &amp; Java<ul> <li>02a Main</li> <li>02b Project</li> </ul> </li> <li>03 System and Computer Organisation<ul> <li>03a User Focus</li> <li>03b OS &amp; Application Systems</li> <li>03c Number Bases &amp; Conversions</li> </ul> </li> <li>04 Object-Oriented Programming</li> <li>05 Data Organisation and Retrieval (?)<ul> <li>05a Searching &amp; Sorting Algorithms</li> <li>05b Collections vs Arrays</li> </ul> </li> <li>06 Computer Organisation</li> <li>07 System Fundamentals<ul> <li>07a Systems in Organisations</li> <li>07b System Design Basics</li> </ul> </li> <li>08 Networks<ul> <li>08.1 Network Fundamentals</li> <li>08.2 Data Transmission</li> <li>08.3 Wireless Networking</li> </ul> </li> </ul> </li> <li>HL Only Units<ul> <li>01 Problem-Solving &amp; Data Structures 1</li> <li>02 Control Systems</li> <li>03 Abstract Data Structures<ul> <li>03.1 Recursive Thinking</li> <li>03.2 ADT Stack</li> <li>03.3 ADT Queue</li> <li>03.4 ADT Linked Lists</li> <li>03.5 ADT Trees</li> </ul> </li> <li>04 Resource Management</li> </ul> </li> </ul>"},{"location":"java/","title":"Java Cheatsheet","text":"<p>Note</p> <p>Uninitialised local variables in Java will cause a compile error, while uninitialised class variables (fields) will be initialised to a default value of <code>null</code> (if reference type) or <code>0</code> (if primitive type).</p> <pre><code>public class Test {\n    int a;\n    public static void main(String[] args) {\n        int b;\n        System.out.println(a); // 0\n        System.out.println(b); // Compile error\n    }\n}\n</code></pre>"},{"location":"java/#boilerplate","title":"Boilerplate","text":"<p>Attention</p> <p>The class name must be identical to the file name.</p> <pre><code>public class className {\n    public static void main(String[] args) {\n        // Some code\n    }\n}\n</code></pre>"},{"location":"java/#output","title":"Output","text":"<pre><code>// Print with newline\nSystem.out.println(\"Hello World!\");\n\n// Print without newline\nSystem.out.print(\"Hello \");\nSystem.out.print(\"World!\\n\");\n</code></pre>"},{"location":"java/#input","title":"Input","text":"<pre><code>import java.util.Scanner;\n\n// in main\nScanner sc = new Scanner(System.in);\nString input = sc.nextLine();\n</code></pre> <p>Be careful: <code>nextInt()</code> does not read a newline character, so if <code>nextLine()</code> is used directly after, it will only read a newline character. See this SO answer.</p> <pre><code>int a = sc.nextInt();\nsc.nextLine();\nString b = sc.nextLine();\n</code></pre>"},{"location":"java/#file-handling","title":"File handling","text":"<pre><code>import java.io.*;\nimport java.util.Scanner;\n\n// in main\n// Read from file\ntry {\n    File file = new File(\"filename.txt\");\n    Scanner sc = new Scanner(file);\n    while (sc.hasNextLine()) {\n        String line = sc.nextLine();\n        // Do something with line\n    }\n    sc.close();\n} catch (FileNotFoundException e) {\n    System.out.println(\"An error occurred.\");\n}\n\n// Write to file\ntry {\n    FileWriter file = new FileWriter(\"filename.txt\");\n    file.write(\"Hello World!\");\n    // Write with new line\n    file.write(\"Hello World!\" + System.lineSeparator());\n    file.close();\n} catch (IOException e) {\n    System.out.println(\"An error occurred.\");\n}\n</code></pre>"},{"location":"java/#math","title":"Math","text":"<p>Note</p> <p><code>Math</code> is from <code>java.lang.Math</code>, which is imported by default.</p>"},{"location":"java/#minmax","title":"Min/Max","text":"<pre><code>int min = Math.min(a, b);\nint max = Math.max(a, b);\n</code></pre>"},{"location":"java/#random","title":"Random","text":"<pre><code>// This gives a random number in the range of [min, max)\nint rand = min + (int)(Math.random() * (max - min));\n</code></pre>"},{"location":"java/#array","title":"Array","text":"<p>See HL01.</p>"},{"location":"java/#arraylist","title":"ArrayList","text":"<p>The equivalent of <code>vector</code> in C++ (a dynamic array).</p> <p>Attention</p> <p><code>ArrayList</code> cannot accept primitive types (e.g. <code>int</code>, <code>double</code>), so a class must be used instead (e.g. <code>Integer</code>, <code>Double</code>).</p> <pre><code>import java.util.ArrayList;\n\n// in main\nArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;();\n\n// 2D ArrayList\nArrayList&lt;ArrayList&lt;Integer&gt;&gt; arr = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();\n// alternatively, use the diamond operator\nArrayList&lt;ArrayList&lt;Integer&gt;&gt; arr = new ArrayList&lt;&gt;();\n</code></pre>"},{"location":"java/#arraylist-methods","title":"ArrayList methods","text":"<pre><code>// Add to end\narr.add(element);\n\n// Insert at index\narr.add(index, element);\n\n// Replace at index\narr.set(index, element);\n\n// Get element\nint a = arr.get(index);\n\n// Remove element\narr.remove(index);\narr.remove(element);\n\n// Get size\nint size = arr.size();\n\n// Clear\narr.clear();\n\n// Check if empty\nboolean empty = arr.isEmpty();\n\n// Check if contains element\nboolean contains = arr.contains(element);\n\n// Get index\nint index = arr.indexOf(element);\n\n// To array\nInteger[] arr2 = arr.toArray(new Integer[arr.size()]);\n</code></pre> <pre><code>// Collections methods\nimport java.util.Collections;\n\n// Sort\nCollections.sort(arr);\n// Sort in reverse\nCollections.sort(arr, Collections.reverseOrder());\n// Sort with custom comparator\nCollections.sort(arr, new Comparator&lt;Integer&gt;() {\n    @Override\n    public int compare(Integer a, Integer b) {\n        return a - b;\n    }\n});\n\n// Reverse\nCollections.reverse(arr);\n\n// Shuffle\nCollections.shuffle(arr);\n\n// Swap\nCollections.swap(arr, i, j);\n\n// Rotate\nCollections.rotate(arr, distance);\n\n// Fill\nCollections.fill(arr, element);\n\n// Replace all\nCollections.replaceAll(arr, oldElement, newElement);\n\n// Frequency\nint freq = Collections.frequency(arr, element);\n\n// Max\nint max = Collections.max(arr);\n\n// Min\nint min = Collections.min(arr);\n\n// Binary search\nint index = Collections.binarySearch(arr, element);\n\n// Add all\nCollections.addAll(arr, element1, element2, ...);\n</code></pre>"},{"location":"HL/","title":"HL Units Index","text":"<ul> <li>01 Problem-Solving &amp; Data Structures 1</li> <li>02 Control Systems</li> <li>03 Abstract Data Structures<ul> <li>03.1 Recursive Thinking</li> <li>03.2 ADT Stack</li> <li>03.3 ADT Queue</li> <li>03.4 ADT Linked Lists</li> <li>03.5 ADT Trees</li> </ul> </li> <li>04 Resource Management</li> </ul>"},{"location":"HL/01/","title":"01 Problem-Solving &amp; Data Structures 1","text":"<p>Syllabus points</p> <ul> <li>D.3.6 Construct code examples related to selection statements</li> <li>D.3.7 Construct code examples related to repetition statements</li> <li>D.3.8 Construct code examples related to static arrays</li> </ul>"},{"location":"HL/01/#1d-arrays","title":"1D Arrays","text":"<p>Syllabus points</p> <ul> <li>4.3.13 Construct algorithms using \u2026 1-D arrays \u2026</li> <li>D.3.8 Construct code examples related to static arrays</li> </ul> <p>An array is a fixed-size variable to store one or more values of a given data type.</p> <p>Attention</p> <p>Arrays usually use 0-based indexing.</p> <pre><code>/*\nCan separate into 2 lines:\n    &lt;type&gt;[] &lt;name&gt;; OR &lt;type&gt; &lt;name&gt;[];\n    &lt;name&gt; = new &lt;type&gt;[&lt;size&gt;];\n*/\nint[] arr;\narr = new int[5];\n\n/*\nOr can combine into one line:\n    &lt;type&gt;[] &lt;name&gt; = new &lt;type&gt;[&lt;size&gt;];\n*/\nint[] arr = new int[5];\n\n/*\nOr use an initializer list:\n    &lt;type&gt;[] &lt;name&gt; = {&lt;value1&gt;, &lt;value2&gt;, ..., &lt;valueN&gt;};\n*/\nint[] arr = {1, 2, 3, 4, 5};\n</code></pre> <pre><code>for (int i = 0; i &lt; arr.length; i++) {\n    System.out.println(arr[i]);\n}\n</code></pre>"},{"location":"HL/01/#2d-arrays","title":"2D Arrays","text":"<p>Syllabus points</p> <ul> <li>5.1.4 Describe the characteristics of a 2-D array</li> <li>5.1.5 Construct algorithms using 2-D arrays</li> </ul> <p>A 2D array is an array of 1D arrays.</p> <pre><code>/*\n&lt;type&gt;[][] &lt;name&gt; = new &lt;type&gt;[&lt;size&gt;][&lt;size&gt;];\n*/\nint[][] arr = new int[5][5];\n\n/*\nOr use an initializer list:\n    &lt;type&gt;[][] &lt;name&gt; = {{&lt;value1&gt;, &lt;value2&gt;, ..., &lt;valueN&gt;}, {&lt;value1&gt;, &lt;value2&gt;, ..., &lt;valueN&gt;}, ..., {&lt;value1&gt;, &lt;value2&gt;, ..., &lt;valueN&gt;}};\n*/\nint[][] arr = {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}};\n</code></pre> <pre><code>for (int i = 0; i &lt; arr.length; i++) {\n    for (int j = 0; j &lt; arr[i].length; j++) {\n        System.out.println(arr[i][j]);\n    }\n}\n</code></pre>"},{"location":"HL/02/","title":"02 Control Systems","text":"<p>Syllabus points</p> <ul> <li>6.1.7 Outline OS resource management techniques: \u2026 interrupt, polling</li> <li>7.1.1 Discuss a range of control systems</li> <li>7.1.2 Outline the uses of microprocessors and sensor input in control systems</li> <li>7.1.3 Evaluate different input devices for the collection of data in specific situations</li> <li>7.1.4 Explain the relationship between a sensor, the processor and an output transducer</li> <li>7.1.5 Describe the role of feedback in a control system</li> <li>7.1.6 Discuss the social impacts and ethical considerations associated with the use of embedded systems</li> <li>7.1.7 Compare a centrally controlled system with a distributed system</li> <li>7.1.8 Outline the role of autonomous agents acting within a larger system</li> </ul>"},{"location":"HL/02/#control-system","title":"Control system","text":"<p>A control system is a type of computer system that manages and directs other devices or systems.</p> <p>Control systems take an input, process this according to the rules of the system and cause an output, often using a motor or other actuator.</p> <ol> <li>Measurement of the process variable (input)</li> <li>Evaluation and comparison with the desired level (processing)</li> <li>Control of the required level of the parameter involved (output)</li> </ol>"},{"location":"HL/02/#components","title":"Components","text":""},{"location":"HL/02/#transducer","title":"Transducer","text":"<p>A transducer is a device that converts signals in one form of energy into another (e.g. microphone - sound waves into electrical signals).</p> <ul> <li>Input physical, output electrical: sensor (+ ADC)</li> <li>Input electrical, output physical: actuator (+ DAC)</li> </ul> <p>Advantages of transducers: can convert signals into electric form</p> <ul> <li>Ease of amplification</li> <li>Ease of integration and differentiation</li> <li>Ease of convertibility from analogue to digital and vice versa</li> <li>Remote controllability and easy data transmission capabilities</li> <li>Compatibility with microprocessors and computers</li> </ul>"},{"location":"HL/02/#sensor","title":"Sensor","text":"<p>A sensor is an input device that continuously takes readings of the environment.</p> <p>Types of sensors:</p> <ul> <li>Temperature (thermometer)</li> <li>Light</li> <li>Infrared</li> <li>Sound/voice</li> <li>Pressure</li> <li>Motion</li> <li>Humidity</li> <li>pH</li> <li>Gas</li> <li>Magnetic</li> <li>Position</li> <li>Proximity</li> <li>Touch</li> </ul>"},{"location":"HL/02/#analogue-to-digital-converter-adc","title":"Analogue-to-digital converter (ADC)","text":"<p>An ADC is a device that converts an analogue (continuous) signal into a digital (discrete, binary) signal.</p> <ul> <li>Collecting data: sampling</li> <li>Converting data to e.g. binary: quantisation</li> </ul>"},{"location":"HL/02/#microprocessor","title":"Microprocessor","text":"<p>A microprocessor compares the input converted by the ADC to pre-defined/stored/preset values.</p>"},{"location":"HL/02/#digital-to-analogue-converter-dac","title":"Digital-to-analogue converter (DAC)","text":"<p>A DAC is a device that converts a digital signal into an analogue signal for an actuator.</p>"},{"location":"HL/02/#actuator","title":"Actuator","text":"<p>An actuator is an output device that executes a physical action (e.g. fan, motor, pump, light) (actually does something).</p>"},{"location":"HL/02/#examples","title":"Examples","text":"Input (sensors) Processing Output (actuators) Automatic doors Motion sensor, infrared light beam (light sensor), pressure pad If it detects something beyond the set parameters - something that isn\u2019t usually there, a signal is sent to open the door Door opens (door engines / motors) Motor opens/closes the door. Heating systems Temperature sensor, timer compare temperature input to the preset range. Switch on/off heater / refrigeration unit Taxi meters Timer, odometer, sensor to measure rotation of axle Algorithm that converts distance/time to money Continuously displays increasing fare on screen Elevators Motion sensor, pressure sensor, Counts holes in lift shaft to calculate where it is. Measures weight inside elevator Motor speed varies (slows as you approach required floor) door opens when you reach the floor, alarm goes off if overloaded, doors reopen if something in the way Washing machines Temperature sensor, pressure sensor, speed sensor, buttons Algorithm that measures how long and how much water the machine needs to wash the clothes in Timer display, LEDs showing whether the machine is on or not Process control Pressure sensor, temperature sensor, switch, motion sensor, timer Dependent on what is being processed Motor, heater, robotic arm Device drivers No sensor input - data Motor, print head/valve on nozzle, speaker Domestic robots Pressure sensor, camera, infrared Depends on task Algorithm that determines how to process the data GPS systems GPS receiver Trilateration Display of location as co-ordinates or combined with other software to plot on map Traffic lights Induction loop in road Calculate how long traffic light needs to be on to allow all the cars to get through, combined with timer Change in the colour of the lights in preset order\u2026"},{"location":"HL/02/#benefits-and-limitations","title":"Benefits and limitations","text":""},{"location":"HL/02/#benefits","title":"Benefits","text":"<ul> <li>Consistency and accuracy in the positioning of moving parts of an equipment</li> <li>The more economic use of existing plants (by saving fuel/and or electrical energy)</li> <li>The release of skilled personnel for other productive work</li> <li>Reduction of physical effort with consequent reduction of fatigue and boredom</li> <li>Improved working conditions</li> </ul>"},{"location":"HL/02/#limitations","title":"Limitations","text":"<ul> <li>The initial cost is high</li> <li>Power fluctuations (causing unpredictable results)</li> <li>Lack of skilled personnel to monitor and maintain specialist equipment</li> </ul>"},{"location":"HL/02/#social-and-ethical-impacts","title":"Social and ethical impacts","text":"<p>A social issue is a problem that influences a considerable number of individuals within a society.</p> <p>An ethical issue is a problem or situation that requires a person or organisation to choose between alternatives that must be evaluated as right/ethical or wrong/unethical.</p>"},{"location":"HL/02/#tagging-prisoners","title":"Tagging prisoners","text":"<ul> <li>Advantages<ul> <li>Allows non-dangerous criminals to move</li> <li>Reduces the number of people needed to be in prison</li> <li>Allows for tracking at all times</li> </ul> </li> <li>Disadvantages<ul> <li>Loss of freedom of movement</li> <li>Could be hacked to track innocent people</li> <li>Tracking data could be sold off to make money</li> </ul> </li> </ul>"},{"location":"HL/02/#surveillance","title":"Surveillance","text":"<ul> <li>Advantages<ul> <li>Allows for greater security</li> <li>Could be used as effective evidence in court cases</li> <li>Allows fewer people to have to monitor others</li> </ul> </li> <li>Disadvantages<ul> <li>Loss of privacy</li> <li>Could be hacked and used for unintended purposes</li> <li>Could be used to spy on people (drones)</li> </ul> </li> </ul>"},{"location":"HL/02/#economic-impact","title":"Economic impact","text":"<ul> <li>Improved profitability (reduced cost per unit)</li> <li>Improved, skilled workforce (creating an economic hub for other businesses to develop)</li> <li>Unfair advantages against less-developed nations</li> </ul>"},{"location":"HL/02/#environmental-impact","title":"Environmental impact","text":"<ul> <li>Need for more raw materials (contributing to climate change)</li> <li>Increase in physical digital waste (disposal problems)</li> </ul>"},{"location":"HL/02/#legal-impact","title":"Legal impact","text":"<ul> <li>New technology/systems bring new legislation</li> <li>Laws in one country may be different to another</li> </ul>"},{"location":"HL/02/#centralised-and-distributed-systems","title":"Centralised and distributed systems","text":"<p>A centralised system is where all the processing is done in one place. This is often the case with embedded systems. The processing is done by a microprocessor, which is connected to the sensors and actuators.</p> <ul> <li>Advantages<ul> <li>Easier to administrate</li> <li>More control</li> </ul> </li> <li>Disadvantages<ul> <li>If the main sensor/controller fails, the whole system fails</li> </ul> </li> </ul> <p>A distributed system is where the processing is done in multiple places. This is often the case with networked systems. The processing is done by multiple microprocessors, which are connected to the sensors and actuators.</p> <ul> <li>Advantages<ul> <li>Quicker access</li> <li>Shared load</li> <li>Response more specific to the environment</li> </ul> </li> <li>Disadvantages<ul> <li>More expensive to have multiple controllers/sensors</li> <li>More complex than a centralised system</li> </ul> </li> </ul>"},{"location":"HL/02/#open-and-closed-loop-systems","title":"Open- and closed-loop systems","text":""},{"location":"HL/02/#open-loop-system","title":"Open-loop system","text":"<p>An open-loop system only repeats a task given a set input.</p> <pre><code>graph LR\nA[Input] --&gt; B[Processing] --&gt; C[Output]</code></pre> <p>e.g. for a microwave:</p> <pre><code>graph LR\nA[Time period] --&gt; B[Heating] --&gt; C[Temperature of food]</code></pre> <p>Sample steps of operation:</p> <ul> <li>The desired input is set/the start button is pushed</li> <li>A <code>&lt;type of sensor&gt;</code> detects <code>&lt;type of input&gt;</code></li> <li>The analogue signal is converted to a digital signal</li> <li>The processor compares the input to a set value</li> <li>If the value is less/greater/outside the set range, the processor sends a signal to the output transducer (<code>&lt;type of actuator&gt;</code>) to increase/decrease the <code>&lt;type of output&gt;</code></li> </ul> <p>e.g. a washing machine (N19 HP1):</p> <ul> <li>The start button is pushed</li> <li>A water level sensor detects the water level</li> <li>The analogue signal is converted to a digital signal</li> <li>The processor compares the input to a set value</li> <li>If the value reaches the set value, the processor sends a signal to the output transducer (water valve) to stop the water supply</li> </ul>"},{"location":"HL/02/#closed-loop-system","title":"Closed-loop system","text":"<p>A closed-loop system can take into account the output of the system and adjust the input accordingly.</p> <pre><code>graph LR\nA[Desired output/setpoint/reference] --&gt; B[Error] --&gt; C[Controller] --&gt; D[Actuator] --&gt; E[Plant] --&gt; F[Output] &amp; G[Sensor]\nG --&gt; B</code></pre> <p>The target is to minimise the error (difference between the desired output and the actual output).</p> <ul> <li>Disturbance: unwanted variation in the system (e.g. from the environment - icy roads in a car)</li> <li>Noise: measurement error from the technology used in the sensor</li> </ul> <p>Sample steps of operation:</p> <ul> <li>The desired input is set</li> <li>A <code>&lt;type of sensor&gt;</code> detects <code>&lt;type of output&gt;</code></li> <li>The analogue signal is converted to a digital signal</li> <li>And sent back to the processor</li> <li>The error/difference between the desired input and the actual output is calculated</li> <li>The difference is compared to a set value to determine if the <code>&lt;type of output&gt;</code> needs to be adjusted</li> <li>If the output should be adjusted by an amount dependent upon the error, the processor sends a signal to the output transducer (<code>&lt;type of actuator&gt;</code>) to increase/decrease the <code>&lt;type of output&gt;</code></li> <li>The above process is repeated continually</li> </ul> <p>e.g. a speed controller in a motor (M17 HP1):</p> <ul> <li>The desired speed is set</li> <li>A speed sensor detects the speed of the motor</li> <li>The analogue signal is converted to a digital signal</li> <li>And sent back to the processor</li> <li>The error/difference between the desired speed and the actual speed is calculated</li> <li>The difference is compared to a set value to determine if the speed of the motor needs to be adjusted</li> <li>If the output should be adjusted by an amount dependent upon the error, the processor sends a signal to the output transducer (motor) to increase/decrease the speed of the motor</li> <li>The above process is repeated continually</li> </ul>"},{"location":"HL/02/#autonomous-agent","title":"Autonomous agent","text":"<p>An autonomous agent is a softer entity that can carry out tasks on behalf of a user with some degree of independence/autonomy by employing some knowledge or representation of the user\u2019s goals or desires.</p> <p>Features of an autonomous agent:</p> <ul> <li>Autonomy: the ability to activate itself and select actions without direct human intervention</li> <li>Reactive behaviour: the ability to respond to changes in the environment</li> <li>Concurrency/sociality: the ability to interact with other agents through communication (coordination, cooperation, competition)</li> <li>Persistence: the ability to run continuously and not on demand</li> </ul>"},{"location":"HL/04/","title":"04 Resource Management","text":""},{"location":"HL/04/#system-resources","title":"System resources","text":"<p>Syllabus points</p> <ul> <li>6.1.1 Identify the resources that need to be managed within a computer system</li> <li>6.1.2 Evaluate the resources available in a variety of computer systems</li> <li>6.1.3 Identify the limitations of a range of resources in a specified computer system</li> <li>6.1.4 Describe the possible problems resulting from the limitations in the resources in a computer system</li> </ul>"},{"location":"HL/04/#resources-to-manage","title":"Resources to manage","text":"<ul> <li>Primary memory (RAM)</li> <li>Secondary storage/memory (HDD/SSD/optical drives)</li> <li>Processor speed</li> <li>Bandwidth</li> <li>Screen resolution</li> <li>Sound processor</li> <li>Graphics processor</li> <li>Cache</li> <li>Network connectivity</li> </ul>"},{"location":"HL/04/#primary-memory","title":"Primary memory","text":"<p>The primary memory is a place where all data/programs currently being processed are kept.</p> <p>Too little physical memory means the system needs to use secondary storage via virtual memory, which is much slower; if virtual memory cannot be created or is insufficient, the program/data cannot be loaded. It influences how many processes can be done simultaneously.</p>"},{"location":"HL/04/#secondary-storage","title":"Secondary storage","text":"<p>The secondary storage is a place where data/programs can be stored even if power is lost (RAM is volatile).</p> <p>Too little storage space limits how much data can be kept. There would be no place to save the work so data might be lost. The OS cannot use storage as virtual memory if RAM fills up.</p>"},{"location":"HL/04/#processor","title":"Processor","text":"<p>The processor does all calculations in a computer system.</p> <p>The processor speed is a measurement of how many calculations can be done per second (1GHz = 1 billion calculations per second).</p> <p>A core is an ALU (arithmetic logic unit) that can do calculations. A multi-core processor has multiple ALUs, so it can do more calculations at once.</p> <p>Too slow a processor means it will take longer to perform tasks. Fewer cores mean the processor can only do a limited number of tasks at once (i.e. affects how many tasks a system can cope with simultaneously).</p>"},{"location":"HL/04/#bandwidth","title":"Bandwidth","text":"<p>Bandwidth is a measurement of how much data can be sent at the same time in a certain time frame (also called bitrate), measured in bits per second (bps).</p> <p>Limiting the bandwidth means data will take longer to move between two points (i.e. affects how long it takes before data can be processed in its entirety).</p>"},{"location":"HL/04/#screen-resolution","title":"Screen resolution","text":"<p>Screen resolution is a measurement of the number of pixels (the height times the width) of the display.</p> <p>If the resolution is too limited, the number of pixels that can be displayed is less, so the display might be pixelated (blocky). Lower resolution means smaller file size, but poorer quality images.</p>"},{"location":"HL/04/#sound-processor","title":"Sound processor","text":"<p>Sound reproduction is done by a separate processor, freeing up the CPU to do other calculations. It can also contain a bank of \u201csampled\u201d sounds to reproduce better-quality music/audio.</p> <p>Without a sound processor, the CPU is taxed with processing sounds, slowing down the system overall. The overall quality is not as high as in a system with a dedicated sound processor.</p>"},{"location":"HL/04/#graphics-processor","title":"Graphics Processor","text":"<p>A graphics processor does complex graphic processing (like 3D rendering).</p> <p>If the CPU has to do graphics processing, it will take longer or be limited.</p>"},{"location":"HL/04/#cache","title":"Cache","text":"<p>The cache contains the instruction/data the CPU is likely to request next from RAM. It speeds up processing as the CPU does not have to \u201cwait\u201d for instructions to arrive from RAM.</p> <p>Without the cache, the CPU will have to wait for instructions/data to be fetched from RAM, slowing down the system. The user will experience a \u201csluggish\u201d system.</p>"},{"location":"HL/04/#network-interface-controller-nic","title":"Network interface controller (NIC)","text":"<p>Each network card connects to a particular type of network media (cable/wireless signal).</p> <p>Types of NIC:</p> <ul> <li>NIC: LAN/ethernet cables</li> <li>WNIC (Wireless NIC): WiFi signals</li> <li>Bluetooth: Bluetooth signals</li> <li>3G radio: cellular signals</li> </ul> <p>Limited connection types limit the way data can be sent or received in a system. Speed can also be a factor.</p>"},{"location":"HL/04/#resources-in-different-computer-systems","title":"Resources in different computer systems","text":""},{"location":"HL/04/#mainframe","title":"Mainframe","text":"<ul> <li>Processor: thousands of cores</li> <li>Primary memory: vast amounts (to support multiple simultaneous clients)</li> <li>Secondary storage: vast amounts (lots of backup storage)</li> <li>Common use<ul> <li>Large companies</li> <li>For weather/financial predictions</li> <li>To \u201cvirtualize\u201d smaller computers</li> </ul> </li> <li>Main companies: Cray (HP), IBM</li> </ul>"},{"location":"HL/04/#pcs-desktop","title":"PCs (Desktop)","text":"<ul> <li>Processor: Single processor (multiple cores) 1-4 GHz</li> <li>Primary memory: 2-16 GB</li> <li>Secondary storage: 256 GB to 2 TB</li> <li>Common use<ul> <li>Used in companies/schools (where portability is not needed)</li> <li>Can be expanded by adding expansion cards (graphics cards)</li> <li>Used to be the most common type of personal computer</li> </ul> </li> </ul>"},{"location":"HL/04/#sub-laptops-netbooks","title":"Sub-laptops (netbooks)","text":"<ul> <li>Processor: Single/multiple cores (1-2 GHz)</li> <li>Primary memory: 1-2 GB</li> <li>Secondary storage: Normally SSD \u2013 16-128 GB</li> <li>Common use<ul> <li>Fueled by the \u2018netbook boom\u2019 of the early 2000s (before tablets)</li> <li>Runs stripped-down OS (Linux, ChromeOS)</li> <li>Portability and battery life are key features</li> </ul> </li> </ul>"},{"location":"HL/04/#cell-phonesmobiles","title":"Cell phones/mobiles","text":"<ul> <li>Processor: Single/Multicore</li> <li>Primary memory: 1-3 GB</li> <li>Secondary storage: Usually limited, but can be upgraded (MicroSD card)</li> <li>Common use<ul> <li>The most common personal computing device in the world</li> <li>Getting more capable, rivaling PCs/laptops</li> <li>The biggest constraint is screen size and input options (lack of physical keyboard)</li> </ul> </li> </ul>"},{"location":"HL/04/#tablets","title":"Tablets","text":"<ul> <li>Processor: Single/Multicore</li> <li>Primary memory: 1-4 GB</li> <li>Secondary storage: Usually limited, but can be upgraded (MicroSD card)</li> <li>Common use<ul> <li>Very common for media consumption</li> <li>Getting more capable, rivaling PCs/laptops</li> <li>The biggest constraint is the lack of a physical keyboard</li> </ul> </li> </ul>"},{"location":"HL/04/#pdas-personal-digital-assistants","title":"PDAs (Personal Digital Assistants)","text":"<ul> <li>Processor: Single core (&lt;1GHz)</li> <li>Primary memory: Limited (&lt;500MB)</li> <li>Secondary storage: Limited (&lt;128MB)</li> <li>Common use<ul> <li>Not used that much anymore</li> <li>Used for calendars/emails</li> <li>Was overtaken by smartphones and mobiles in the early 2000s</li> </ul> </li> </ul>"},{"location":"HL/04/#digital-camera","title":"Digital Camera","text":"<ul> <li>Processor: Single core</li> <li>Primary memory: Limited</li> <li>Secondary storage: Expandable through the use of memory cards (SD/Compact flash/Memory Stick)</li> <li>Common use<ul> <li>For higher-end photography</li> <li>Most digital cameras are now integrated into mobile phones/laptops/tablets</li> </ul> </li> </ul>"},{"location":"HL/04/#limitations-of-resources","title":"Limitations of resources","text":"<ul> <li>Primary memory: too little \u2192 virtual memory (slower), or else not be able to process instructions</li> <li>Secondary storage: too little \u2192 not able to store data and for virtual memory</li> <li>CPU: too slow \u2192 latency, lag, or failure (cascading failure: one process not being able to execute instructions may impact another process)</li> <li>Network: limited bandwidth \u2192 slow transfer of data (latency/lag)</li> <li>Display server: insufficient resources \u2192 slow display of graphics (lag), corrupted/failure to display graphics</li> <li>Sound server: insufficient resources \u2192 slow playback of sound (lag), corrupted/failure to play sound</li> </ul> <p>IB syllabus examples:</p> <ul> <li>User time is wasted if primary memory is too small or processor speed inadequate</li> <li>Multi-access and multi-programming environments should be considered as well as single-user systems<ul> <li>Multi-user system: many users on the same machine/many users connected to the same network</li> <li>Multi-programming system: a system that can have different programs (apps) installed (v.s. single programming system - can only run one program/set of programs, e.g. car navigation system)</li> </ul> </li> </ul>"},{"location":"HL/04/#role-of-the-operating-system","title":"Role of the operating system","text":"<p>Syllabus points</p> <ul> <li>6.1.5 Explain the role of the operating system in terms of managing memory, peripherals, and hardware interfaces</li> <li>6.1.7 Outline OS resource management techniques: scheduling, policies, multitasking, virtual memory, paging, interrupt, polling</li> <li>6.1.8 Discuss the advantages of producing a dedicated operating system for a device</li> <li>6.1.9 Outline how an operating system hides the complexity of the hardware from users and applications</li> </ul>"},{"location":"HL/04/#functions-of-the-operating-system","title":"Functions of the operating system","text":"<p>See also</p> <p>SL03b OS &amp; Applications \u00a7 System software</p> <ul> <li>Controlling peripheral devices: through drivers (software that allows the OS to communicate with the hardware), allows users to use the peripheral devices through other software</li> <li>Managing primary memory: ensure that each process (program) runs in its own allocated memory space to prevent corruption of data/security issues</li> <li>Virtual memory: temporarily transfer pages of data from RAM to disk storage to compensate for shortages of physical memory</li> <li>Managing secondary storage: provide folder/directory structure and access methods, including security access</li> <li>User interface: provide a way for users to interact with the computer system</li> </ul>"},{"location":"HL/04/#os-resource-management-techniques","title":"OS resource management techniques","text":""},{"location":"HL/04/#time-slicingscheduling","title":"Time-slicing/scheduling","text":"<ul> <li>Multi-user system: the set amount of processing time each user gets</li> <li>Single-user system: the set amount of processing time each program gets</li> <li>Slices/threads are alternately processed to give the illusion of \u201cmultitasking\u201d</li> <li>Scheduling: the method used to determine which work gets to use resources next (e.g. processors, network links, expansion cards)<ul> <li>Round-robin: each process gets a fixed amount of time to execute (e.g. process A gets 10ms, process B gets 10ms, process C gets 10ms, then back to process A)</li> </ul> </li> </ul>"},{"location":"HL/04/#interrupt","title":"Interrupt","text":"<ul> <li>Interrupts: signals sent to the CPU by hardware or software indicating an event that needs immediate attention</li> <li>Handled by the interrupt handler (part of the OS) based on the priority of the interrupt</li> <li>Upon receiving an interrupt, the OS will suspend the current process, save its state and execute the interrupt handler; after the interrupt handler is finished, the OS will restore the state of the process and resume it</li> <li>Can be hardware or software generated (e.g. divide by zero error in a program, or a key press on the keyboard)</li> </ul>"},{"location":"HL/04/#policies","title":"Policies","text":"<ul> <li>Policies: rules that determine what needs to be done when a certain event occurs</li> <li>Mechanisms: rules that specify how to do something</li> <li>e.g. the timer construct that limits the amount of time a process can run is a mechanism; the amount of time that each process gets is a (user) policy</li> </ul>"},{"location":"HL/04/#multitasking","title":"Multitasking","text":"<ul> <li>Multitasking: the ability of an OS to execute more than one process at the same time</li> <li>The OS keeps track of all the processes that are running and allocates CPU time to each process</li> </ul>"},{"location":"HL/04/#virtual-memory-and-paging","title":"Virtual memory and paging","text":"<ul> <li>Virtual memory: a feature of the OS that allows a computer to compensate for shortages of physical memory by temporarily transferring pages of data from RAM to disk storage</li> <li>Paging/swapping: the process of transferring pages of data from RAM to disk storage and back</li> <li>Pagefile/swap file: the temporary storage space on the hard disk that stores the pages of data</li> <li>Memory Management Unit (MMU): the hardware that manages the paging process</li> <li>Algorithms used by the MMU to determine which pages to swap out:<ul> <li>Least recently used (LRU): the page that has not been used for the longest time</li> <li>First in first out (FIFO): the page that has been in memory for the longest time</li> <li>Least frequently used (LFU): the page that has been used the least number of times</li> <li>Random: a random page is selected</li> </ul> </li> <li>Advantage: allows more applications to run than there is available physical memory by the use of page/swap files/part of hard disk as primary memory; larger application can run with less real RAM</li> <li>Disadvantage: applications run more slowly and it takes more time to switch between applications, as it uses hard drive memory as primary memory; when a computer\u2019s virtual memory resources are overused, programs lock-up/do not run/disk thrashing occurs; reduce the amount of hard drive space available for storage</li> </ul>"},{"location":"HL/04/#polling","title":"Polling","text":"<ul> <li>Polling: the process where the computer or controlling device waits for an external device to check for its readiness or state, often with low-level hardware (e.g. when a printer is connected via a parallel port, the computer waits until the printer has received the next character)</li> <li>Alternatives to polling: interrupts (signals generated by devices or processes to indicate that they need attention)</li> <li>Polling v.s. interrupt (advantages and disadvantages)<ul> <li>Polling<ul> <li>Advantages<ul> <li>Simple to implement</li> <li>No need for additional hardware</li> </ul> </li> <li>Disadvantages<ul> <li>Wastes CPU time</li> <li>Can miss events if the polling interval is too long</li> </ul> </li> </ul> </li> <li>Interrupt<ul> <li>Advantages<ul> <li>Does not waste CPU time</li> <li>Does not miss events</li> </ul> </li> <li>Disadvantages<ul> <li>Requires additional hardware</li> <li>More complex to implement</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"HL/04/#dedicated-os","title":"Dedicated OS","text":"<p>Examples of dedicated OS:</p> <ul> <li>iOS/macOS/iPadOS for Apple products only</li> <li>Embedded OS: OS that is built into the device (e.g. car navigation system, smart TV)</li> <li>Real-time OS: OS that is designed to process data as it comes in (e.g. air traffic control system, stock market system)</li> </ul> <p>Advantages of dedicated OS:</p> <ul> <li>Security: e.g. banks use dedicated OS to prevent cyber attacks</li> <li>Customisability: can perform a specific function at maximum efficiency</li> <li>Modify priorities: can eliminate unnecessary features to reduce OS size and resource usage</li> </ul>"},{"location":"HL/04/#hiding-complexity","title":"Hiding complexity","text":"<ul> <li>Abstraction of the OS hides the complexity of the hardware from users and applications</li> <li>Different hardware media can appear the same to the user (e.g. USB flash drive, external hard drive, SD card, CD/DVD)</li> </ul> <p>Examples:</p> <ul> <li>Drive letter: a letter assigned to a storage device by the OS (e.g. C: drive, D: drive)</li> <li>Virtual memory: the user sees a section of the hard disk as if it were RAM, and the OS manages the paging process</li> <li>Input devices: the OS takes care of the low-level details of the peripheral devices (e.g. keyboard, mouse, touchpad, touchscreen, microphone, camera, etc.)</li> <li>Java Virtual Machine (JVM): a virtual machine that allows Java programs to run on any platform by interpreting the Java bytecode for a particular hardware platform</li> </ul>"},{"location":"HL/03/","title":"03 Abstract Data Structures","text":"<ul> <li>03.1 Recursive Thinking</li> <li>03.2 ADT Stack</li> <li>03.3 ADT Queue</li> <li>03.4 ADT Linked Lists</li> <li>03.5 ADT Trees</li> </ul>"},{"location":"HL/03/1/","title":"03.1 Recursive Thinking","text":"<p>Syllabus points</p> <ul> <li>5.1.1 Identify a situation that requires the use of recursive thinking</li> <li>5.1.2 Identify recursive thinking in a specified problem solution</li> <li>D.4.1 Define the term recursion</li> </ul> <p>Recursion is the technique of calling (a simpler version of) a function within itself. Recursions need a base case (ending condition). It is useful for a large task that can be broken down into repetitive sub-tasks.</p> <pre><code>int factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n</code></pre> <ul> <li>Advantages<ul> <li>Simpler code (only need to define the base case and recursive case)</li> <li>Some problems are inherently recursive, such as graph and tree traversal</li> <li>Reduces the length of the code compared to iterative code</li> </ul> </li> <li>Disadvantages<ul> <li>Generally slower than non-recursive functions (because each time the function is called, the stack grows and the final answer is returned when the stack is popped completely)</li> <li>May require a lot of memory space to hold intermediate results on the system stacks; may run out of memory if recursive calls are not properly checked</li> <li>Hard to analyse or understand the code</li> </ul> </li> </ul>"},{"location":"HL/03/2/","title":"03.2 ADT Stack","text":"<p>Syllabus points</p> <ul> <li>5.1.10 Explain the use of arrays as static stacks and queues</li> <li>D.4.14 Outline the features of ADT\u2019s stack, queue and binary tree</li> </ul> <p>A stack is a data structure which operates on a first-in, last-out basis (LIFO). It uses a single pointer (index) to keep track of the data.</p> <pre><code>+---+\n| 3 | &lt;-- top\n+---+\n| 2 |\n+---+\n| 1 |\n+---+ \n</code></pre>"},{"location":"HL/03/2/#features","title":"Features","text":"<ul> <li>Made of a \u201cchain\u201d of data</li> <li>Elements can be \u201cpushed\u201d onto the top</li> <li>Elements can be \u201cpopped\u201d from the top</li> <li>LIFO (last-in, first-out)</li> <li>Accessing an element from an empty stack is an error</li> </ul> <p>Basic operations:</p> <ul> <li>insert (push) an item onto the stack</li> <li>remove (pop) an item from the stack</li> </ul>"},{"location":"HL/03/2/#applications","title":"Applications","text":"<ul> <li>Function calls (call stack): stores the return address of the function</li> <li>Expression evaluation and syntax parsing: stores the operators and operands (infix, postfix, prefix)</li> <li>Parenthesis matching: stores the opening parenthesis and pops them when a matching closing parenthesis is encountered</li> <li>String reversal: stores the characters of the string</li> </ul>"},{"location":"HL/03/2/#push","title":"Push","text":"<pre><code>void push(int item) {\n    if (top + 1 == MAX) {\n        System.out.println(\"Stack is full\");\n        return;\n    }\n    stack[++top] = item;\n}\n</code></pre>"},{"location":"HL/03/2/#pop","title":"Pop","text":"<pre><code>int pop() {\n    if (top == -1) {\n        System.out.println(\"Stack is empty\");\n        return -1;\n    }\n    return stack[top--];\n}\n</code></pre>"},{"location":"HL/03/3/","title":"03.3 ADT Queue","text":"<p>Syllabus points</p> <ul> <li>5.1.10 Explain the use of arrays as static stacks and queues</li> <li>D.4.14 Outline the features of ADT\u2019s stack, queue and binary tree</li> </ul> <p>A queue is a data structure which operates on a first-in, first-out basis (FIFO). It uses 2 pointers to keep track of the HEAD and the TAIL of the queue.</p> <pre><code>+---+---+---+---+---+---+---+---+---+---+\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n+---+---+---+---+---+---+---+---+---+---+\n  ^                                   ^\n  |                                   |\n head                                tail\n</code></pre>"},{"location":"HL/03/3/#features","title":"Features","text":"<ul> <li>Made of a \u201cchain\u201d of data</li> <li>Elements can be \u201cenqueued\u201d at the back (tail) of the queue</li> <li>Elements can be \u201cdequeued\u201d from the front (head) of the queue</li> <li>FIFO (first-in, first-out)</li> <li>Accessing an element from an empty queue is an error</li> </ul> <p>Basic operations:</p> <ul> <li>insert (enqueue) an item into the queue</li> <li>remove (dequeue) an item from the queue</li> </ul>"},{"location":"HL/03/3/#enqueue","title":"Enqueue","text":"<pre><code>void enqueue(int item) {\n    if (tail + 1 == MAX) {\n        System.out.println(\"Queue is full\");\n        return;\n    }\n    queue[++tail] = item;\n}\n</code></pre> <p>Circular queue:</p> <pre><code>void enqueue(int item) {\n    if (size == MAX) {\n        System.out.println(\"Queue is full\");\n        return;\n    }\n    tail = (tail + 1) % MAX;\n    queue[tail] = item;\n    ++size;\n}\n</code></pre>"},{"location":"HL/03/3/#dequeue","title":"Dequeue","text":"<pre><code>int dequeue() {\n    if (head == tail) {\n        System.out.println(\"Queue is empty\");\n        return -1;\n    }\n    return queue[head++];\n}\n</code></pre> <p>Circular queue:</p> <pre><code>int dequeue() {\n    if (size == 0) {\n        System.out.println(\"Queue is empty\");\n        return -1;\n    }\n    int item = queue[head];\n    head = (head + 1) % MAX;\n    --size;\n    return item;\n}\n</code></pre>"},{"location":"HL/03/4/","title":"03.4 ADT Linked Lists","text":"<p>Syllabus points</p> <ul> <li>5.1.11 Describe the features and characteristics of a dynamic data structure</li> <li>5.1.12 Describe how linked lists operate logically</li> <li>5.1.13 Sketch linked lists (single, double and circular)</li> <li>5.1.18 Define the term dynamic data structure</li> <li>5.1.19 Compare the use of static and dynamic data structures</li> <li>D.4.7 Identify the features of the abstract data type (ADT) list</li> <li>D.4.8 Describe applications of lists</li> </ul>"},{"location":"HL/03/4/#static-and-dynamic-data-structures","title":"Static and dynamic data structures","text":"<p>A static data structure is fixed in size and cannot be resized (e.g. a static array). It is stored in contiguous memory, and content is modified without changing the memory address allocated.</p> <p>A dynamic data structure is not fixed in size and can be resized during operations (e.g. a linked list). The memory address is allocated at runtime.</p> <p>Features of a dynamic data structure:</p> <ul> <li>Each node contains data and a link to other nodes</li> <li>Links are implemented using pointers</li> <li>The list size is not fixed/predetermined</li> </ul> Difference Static data structure Dynamic data structure Memory allocation At compile time At runtime Size Fixed Variable Memory usage Less More Access time Fast Slow Examples Array, stack, queue, tree (fixed) List, tree (variable), hash table <ul> <li>Advantages of static data structures<ul> <li>Faster access time<ul> <li>The memory address is known at compile time and is fixed</li> <li>Accessing elements by indexing</li> </ul> </li> <li>Predictable memory usage<ul> <li>The programmer can predict the memory usage</li> </ul> </li> <li>Efficient memory management<ul> <li>The memory can be allocated and released efficiently</li> <li>No frequent reallocations and memory copies</li> </ul> </li> <li>Reduced overhead<ul> <li>Do not require extra bookkeeping to manage memory allocation and deallocation</li> </ul> </li> <li>Easy to implement and optimise<ul> <li>Algorithms can be optimised, reducing cache misses</li> <li>Code can be simplified by removing dynamic memory allocation features and the error-handling code associated with it</li> </ul> </li> </ul> </li> <li>Advantages of dynamic data structures<ul> <li>Flexibility and scalability<ul> <li>Can grow and shrink at runtime as needed</li> <li>Adapt to changes in the data</li> <li>Suitable for unknown/variable data size</li> </ul> </li> <li>Reduce memory waste<ul> <li>No need to reserve extra space beforehand that may not be used in the future</li> </ul> </li> <li>Improved performance for certain operations<ul> <li>Insertion and deletion in the middle are faster as shifting of elements is not required (only the pointers need to be updated)</li> </ul> </li> <li>Simplify code<ul> <li>Removes the need to check for overflow and underflow and manual memory management</li> <li>Reduce code complexity for data structures that need to be resized frequently</li> </ul> </li> </ul> </li> </ul>"},{"location":"HL/03/4/#singly-linked-list","title":"Singly-linked list","text":"<p>A singly-linked list is a dynamic data structure that consists of a sequence of nodes. Each node contains a data field and a pointer to the next node in the sequence.</p> <pre><code>         +---|---+   +---|---+   +---|---+   +---|---+\nhead --&gt; | 1 | o----&gt;| 2 | o----&gt;| 3 | o----&gt;| 4 | o----&gt; NULL\n         +---|---+   +---|---+   +---|---+   +---|---+\n</code></pre> <pre><code>class SNode {\n    int data;\n    SNode next = null;\n\n    SNode(int data) {\n        this.data = data;\n    }\n}\n\nclass SLinkedList {\n    SNode head = null;\n    // ...\n}\n</code></pre>"},{"location":"HL/03/4/#traversal-of-a-singly-linked-list","title":"Traversal of a singly-linked list","text":"<pre><code>void traverse() {\n    SNode current = head;\n    while (current != null) {\n        System.out.print(current.data + \" \");\n        current = current.next;\n    }\n    System.out.println();\n}\n</code></pre>"},{"location":"HL/03/4/#insertion-into-a-singly-linked-list","title":"Insertion into a singly-linked list","text":"<pre><code>void insertAtBeginning(int item) {\n    SNode newNode = new SNode(item);\n    newNode.next = head;\n    head = newNode;\n}\n\nvoid insertAtEnd(int item) {\n    SNode newNode = new SNode(item);\n    if (head == null) {\n        head = newNode;\n        return;\n    }\n    SNode current = head;\n    while (current.next != null) {\n        current = current.next;\n    }\n    current.next = newNode;\n}\n\nvoid insertAt(int item, int index) {\n    SNode newNode = new SNode(item);\n    if (index == 0) {\n        insertAtBeginning(item);\n        return;\n    }\n\n    // If not inserting at front and list is empty\n    if (head == null) {\n        System.out.println(\"Cannot insertAt \" + index + \": Position not found\");\n        return;\n    }\n\n    // We start at 1 so that we can actually get the node before the target position\n    int count = 1;\n    SNode last = head;\n    while (last.next != null &amp;&amp; count &lt; index) {\n        last = last.next;\n        count++;\n    }\n    if (count == index) {\n        newNode.next = last.next;\n        last.next = newNode;\n    } else {\n        System.out.println(\"Cannot insertAt \" + index + \": Position not found\");\n    }\n}\n</code></pre>"},{"location":"HL/03/4/#deletion-from-a-singly-linked-list","title":"Deletion from a singly-linked list","text":"<pre><code>void deleteAtBeginning() {\n    if (head == null) {\n        System.out.println(\"List is empty\");\n        return;\n    }\n    head = head.next;\n}\n\nvoid deleteAtEnd() {\n    if (head == null) {\n        System.out.println(\"List is empty\");\n        return;\n    }\n    if (head.next == null) {\n        head = null;\n        return;\n    }\n    SNode current = head;\n    while (current.next.next != null) {\n        current = current.next;\n    }\n    current.next = null;\n}\n\nvoid deleteAt(int index) {\n    if (head == null) {\n        System.out.println(\"List is empty\");\n        return;\n    }\n    if (index == 0) {\n        head = head.next;\n        return;\n    }\n\n    // We start at 1 so that we can actually get the node before the target position\n    int count = 1;\n    SNode last = head;\n    while (last.next != null &amp;&amp; count &lt; index) {\n        last = last.next;\n        count++;\n    }\n    if (count == index) {\n        last.next = last.next.next;\n    } else {\n        System.out.println(\"Cannot deleteAt \" + index + \": Position not found\");\n    }\n}\n</code></pre>"},{"location":"HL/03/4/#doubly-linked-list","title":"Doubly-linked list","text":"<p>A doubly-linked list is a dynamic data structure that consists of a sequence of nodes. Each node contains a data field and pointers to the previous and next nodes in the sequence.</p> <pre><code>         +---|---|---+   +---|---|---+   +---|---|---+   +---|---|---+\nNULL &lt;-----o | 1 | o=======o | 2 | o=======o | 3 | o=======o | 4 | o-----&gt; NULL\n         +---|---|---+   +---|---|---+   +---|---|---+   +---|---|---+\n</code></pre> <pre><code>class DNode {\n    int data;\n    DNode prev = null;\n    DNode next = null;\n\n    DNode(int data) {\n        this.data = data;\n    }\n}\n\nclass DLinkedList {\n    DNode head = null;\n    // ...\n}\n</code></pre>"},{"location":"HL/03/4/#traversal-of-a-doubly-linked-list","title":"Traversal of a doubly-linked list","text":"<pre><code>void traverse() {\n    DNode current = head;\n    while (current != null) {\n        System.out.print(current.data + \" \");\n        current = current.next;\n    }\n    System.out.println();\n}\n</code></pre>"},{"location":"HL/03/4/#insertion-into-a-doubly-linked-list","title":"Insertion into a doubly-linked list","text":"<pre><code>void insertAtBeginning(int item) {\n    DNode newNode = new DNode(item);\n    newNode.next = head;\n    if (head != null) {\n        head.prev = newNode;\n    }\n    head = newNode;\n}\n\nvoid insertAtEnd(int item) {\n    DNode newNode = new DNode(item);\n    if (head == null) {\n        head = newNode;\n        return;\n    }\n    DNode current = head;\n    while (current.next != null) {\n        current = current.next;\n    }\n    current.next = newNode;\n    newNode.prev = current;\n}\n\nvoid insertAt(int item, int index) {\n    DNode newNode = new DNode(item);\n    if (index == 0) {\n        insertAtBeginning(item);\n        return;\n    }\n\n    // If not inserting at front and list is empty\n    if (head == null) {\n        System.out.println(\"Cannot insertAt \" + index + \": Position not found\");\n        return;\n    }\n\n    // We start at 1 so that we can actually get the node before the target position\n    int count = 1;\n    DNode last = head;\n    while (last.next != null &amp;&amp; count &lt; index) {\n        last = last.next;\n        count++;\n    }\n    if (count == index) {\n        newNode.next = last.next;\n        if (last.next != null) {\n            last.next.prev = newNode;\n        }\n        newNode.prev = last;\n        last.next = newNode;\n    } else {\n        System.out.println(\"Cannot insertAt \" + index + \": Position not found\");\n    }\n}\n</code></pre>"},{"location":"HL/03/4/#deletion-from-a-doubly-linked-list","title":"Deletion from a doubly-linked list","text":"<pre><code>void deleteAtBeginning() {\n    if (head == null) {\n        System.out.println(\"List is empty\");\n        return;\n    }\n    head = head.next;\n    if (head != null) {\n        head.prev = null;\n    }\n}\n\nvoid deleteAtEnd() {\n    if (head == null) {\n        System.out.println(\"List is empty\");\n        return;\n    }\n    if (head.next == null) {\n        head = null;\n        return;\n    }\n    DNode current = head;\n    while (current.next.next != null) {\n        current = current.next;\n    }\n    current.next = null;\n}\n\nvoid deleteAt(int index) {\n    if (head == null) {\n        System.out.println(\"List is empty\");\n        return;\n    }\n    if (index == 0) {\n        head = head.next;\n        if (head != null) {\n            head.prev = null;\n        }\n        return;\n    }\n\n    // We start at 1 so that we can actually get the node before the target position\n    int count = 1;\n    DNode last = head;\n    while (last.next != null &amp;&amp; count &lt; index) {\n        last = last.next;\n        count++;\n    }\n    if (count == index) {\n        last.next = last.next.next;\n        if (last.next != null) {\n            last.next.prev = last;\n        }\n    } else {\n        System.out.println(\"Cannot deleteAt \" + index + \": Position not found\");\n    }\n}\n</code></pre>"},{"location":"HL/03/5/","title":"03.5 ADT Trees","text":"<p>Syllabus points</p> <ul> <li>5.1.14 Describe how trees operate logically (both binary and non-binary)</li> <li>5.1.15 Define the terms: parent, left-child, right-child, subtree, root and leaf</li> <li>5.1.16 State the result of in order, postorder and preorder tree traversal</li> <li>5.1.17 Sketch binary trees</li> <li>D.4.14 Outline the features of ADT\u2019s stack, queue and binary tree</li> </ul> <p>A tree is a hierarchical/non-linear data structure. It consists of a set of nodes that are connected by edges (a graph with no cycles).</p> <pre><code>graph TD\n    A --&gt; B &amp; C &amp; D\n    B --&gt; E\n    C --&gt; F &amp; G</code></pre> Term Definition Key the value of a node Root the top node Child the node below another node Parent the node above another node Leaf a node with no children Level the distance from the root to a node Height the maximum level in a tree Path a sequence of nodes and edges from one node to another Subtree a set of nodes and edges comprised of a parent and all descendants of that parent Traversal the process of visiting each node in a tree Visiting to arrive at a node to operate (as opposed to passing through)"},{"location":"HL/03/5/#features-of-binary-trees","title":"Features of binary trees","text":"<ul> <li>Made of nodes with two pointers - left (less) and right (greater)</li> <li>Can only have 0, 1 or 2 children</li> <li>Assembled from the root node</li> <li>The root node of a balanced tree contains the middle value</li> <li>Naturally sorted</li> <li>Searching is binary</li> </ul>"},{"location":"HL/03/5/#implementation-of-a-binary-tree","title":"Implementation of a binary tree","text":"<pre><code>class Node {\n    int data;\n    Node left = null;\n    Node right = null;\n\n    Node(int data) {\n        this.data = data;\n    }\n}\n\nclass BinaryTree {\n    Node root = null;\n\n    void insert(int item) {\n        Node newNode = new Node(item);\n        if (root == null) {\n            root = newNode;\n            return;\n        }\n        Node current = root;\n        while (true) {\n            if (item &lt; current.data) {\n                if (current.left == null) {\n                    current.left = newNode;\n                    return;\n                }\n                current = current.left;\n            } else {\n                if (current.right == null) {\n                    current.right = newNode;\n                    return;\n                }\n                current = current.right;\n            }\n        }\n    }\n\n    Node getSuccessor(Node node) {\n        // A successor is the smallest node in the right subtree\n\n        Node parent = node;\n        Node successor = node;\n        Node current = node.right;\n\n        // Go to the left as far as possible\n        while (current != null) {\n            parent = successor;\n            successor = current;\n            current = current.left;\n        }\n\n        // If the successor is not the right child, move the successor's right child up to the successor's position\n        if (successor != node.right) {\n            parent.left = successor.right;\n            successor.right = node.right;\n        }\n\n        return successor;\n    }\n\n    void delete(int item) {\n        if (root == null) {\n            System.out.println(\"Tree is empty\");\n            return;\n        }\n\n        // Find the node to delete\n        Node current = root;\n        Node parent = null;\n        while (current != null) {\n            if (item == current.data) {\n                break;\n            }\n            parent = current;\n            if (item &lt; current.data) {\n                current = current.left;\n            } else {\n                current = current.right;\n            }\n        }\n        if (current == null) {\n            System.out.println(\"Item not found\");\n            return;\n        }\n\n        // Case 1: No children (leaf node)\n        // Just remove the node\n        if (current.left == null &amp;&amp; current.right == null) {\n            if (parent == null) {\n                root = null;\n            } else {        \n                if (current == parent.left) {\n                    parent.left = null;\n                } else {\n                    parent.right = null;\n                }\n            }\n        }\n        // Case 2: One child\n        // Replace the node with its child\n        else if (current.left == null) {\n            if (parent == null) {\n                root = current.right;\n            } else {\n                if (current == parent.left) {\n                    parent.left = current.right;\n                } else {\n                    parent.right = current.right;\n                }\n            }\n        } else if (current.right == null) {\n            if (parent == null) {\n                root = current.left;\n            } else {\n                if (current == parent.left) {\n                    parent.left = current.left;\n                } else {\n                    parent.right = current.left;\n                }\n            }\n        }\n        // Case 3: Two children\n        // Replace the node with its successor\n        else {\n            Node successor = getSuccessor(current);\n            if (parent == null) {\n                root = successor;\n            } else {\n                if (current == parent.left) {\n                    parent.left = successor;\n                } else {\n                    parent.right = successor;\n                }\n            }\n            successor.left = current.left;\n        }\n    }\n\n    void printInOrder(Node node) {\n        if (node == null) {\n            return;\n        }\n        printInOrder(node.left);\n        System.out.print(node.data + \" \");\n        printInOrder(node.right);\n    }\n\n    void printPreOrder(Node node) {\n        if (node == null) {\n            return;\n        }\n        System.out.print(node.data + \" \");\n        printPreOrder(node.left);\n        printPreOrder(node.right);\n    }\n\n    void printPostOrder(Node node) {\n        if (node == null) {\n            return;\n        }\n        printPostOrder(node.left);\n        printPostOrder(node.right);\n        System.out.print(node.data + \" \");\n    }\n}\n</code></pre>"},{"location":"HL/03/5/#capture-the-flag-traversal-technique","title":"Capture-the-flag traversal technique","text":"<ul> <li>In-order traversal: the flag is on the bottom of each node</li> <li>Pre-order traversal: the flag is on the left of each node</li> <li>Post-order traversal: the flag is on the right of each node</li> </ul>"},{"location":"SLHL/","title":"SLHL Units Index","text":"<ul> <li>01 Computational Thinking</li> <li>02 Problem-Solving &amp; Java<ul> <li>02a Main</li> <li>02b Project</li> </ul> </li> <li>03 System and Computer Organisation<ul> <li>03a User Focus</li> <li>03b OS &amp; Application Systems</li> <li>03c Number Bases &amp; Conversions</li> </ul> </li> <li>04 Object-Oriented Programming</li> <li>05 Data Organisation and Retrieval (?)<ul> <li>05a Searching &amp; Sorting Algorithms</li> <li>05b Collections vs Arrays</li> </ul> </li> <li>06 Computer Organisation</li> <li>07 System Fundamentals<ul> <li>07a Systems in Organisations</li> <li>07b System Design Basics</li> </ul> </li> <li>08 Networks<ul> <li>08.1 Network Fundamentals</li> <li>08.2 Data Transmission</li> <li>08.3 Wireless Networking</li> </ul> </li> </ul>"},{"location":"SLHL/01/","title":"01 Computational Thinking","text":"<p>Summary</p> <ol> <li>Decomposition: break the problem down into its components &amp; identify subproblems that need to be solved</li> <li>Pattern recognition: recognise patterns between subproblems</li> <li>Abstraction/pattern generalisation: set up operations that can be used for the subproblems</li> <li>Algorithm design: solve parallel &amp; sequential subproblems</li> </ol>"},{"location":"SLHL/01/#decomposition","title":"Decomposition","text":"<p>Syllabus points</p> <ul> <li>4.1.1 Identify the procedure appropriate to solving a problem</li> <li>4.1.3 Explain the role of sub-procedures in solving a problem</li> </ul> <ul> <li>Breaking down a complex problem/system \u2192 smaller, more manageable, easier-to-understand parts</li> <li>Then examine/solve/design individually</li> <li>\u201cDivide and conquer\u201d</li> </ul> <p>Advantages:</p> <ul> <li>Simpler to work with, easier to solve<ul> <li>Deal with one at a time only</li> <li>Can straightforwardly understand each part before understanding the whole problem</li> </ul> </li> <li>Different people can work on different parts at the same time<ul> <li>Reduce development time</li> </ul> </li> <li>Components can be reused in other programs</li> </ul>"},{"location":"SLHL/01/#examples-of-decomposition","title":"Examples of decomposition","text":"<ul> <li>Brushing teeth<ul> <li>which toothbrush to use</li> <li>how long to brush for</li> <li>how hard to press on our teeth</li> <li>what toothpaste to use</li> </ul> </li> <li>Solving crime<ul> <li>what crime was committed</li> <li>when the crime was committed</li> <li>where the crime was committed</li> <li>what evidence there is</li> <li>if there were any witnesses</li> <li>if there have recently been any similar crimes</li> </ul> </li> <li>Creating app<ul> <li>what kind of app do you want to create</li> <li>what your app will look like</li> <li>who is the target audience for your app</li> <li>what your graphics will look like</li> <li>what audio you will include</li> <li>what software you will use to build your app</li> <li>how the user will navigate your app</li> <li>how you will test your app</li> <li>where you will sell your app</li> </ul> </li> </ul>"},{"location":"SLHL/01/#pattern-recognition","title":"Pattern recognition","text":"<p>Syllabus points</p> <ul> <li>4.1.8 Deduce logical rules for real-world situations</li> </ul> <p>Finding patterns (similarity/common characteristics) among small, decomposed problems.</p> <p>Advantages:</p> <ul> <li>Use the same problem-solving solution for the same pattern<ul> <li>Easier &amp; quicker</li> <li>Solve more complex problems more efficiently</li> </ul> </li> <li>Solve the problem correctly (because generalisations have been identified)</li> </ul>"},{"location":"SLHL/01/#examples-of-pattern-recognition","title":"Examples of pattern recognition","text":"<p>There might even be patterns within a problem, e.g. for each ingredient, we need its name and a specific measurement.</p>"},{"location":"SLHL/01/#abstraction","title":"Abstraction","text":"<p>Syllabus points</p> <ul> <li>4.1.17 Identify examples of abstraction</li> <li>4.1.18 Explain why abstraction is required in the derivation of computational solutions for a specified situation</li> <li>4.1.19 Construct an abstraction from a specified situation</li> <li>4.1.20 Distinguish between a real-world entity and its abstraction</li> </ul> <ul> <li>Filtering out/ignoring/taking away unnecessary characteristics/details to concentrate on necessary/essential ones</li> <li>Creating a model (an easier-to-understand version/general idea of a complex system)</li> </ul> <p>Tip</p> <p>A single abstraction can represent a whole class of similar things (e.g. for any bus route, we need the bus number, start/end time and bus stops to get on/off).</p> <p>This can be done through successive decomposition and by keeping general patterns and removing specific details.</p> <p>Advantages:</p> <ul> <li>Can be viewed both as a process and as an entity (???)</li> <li>Enables concentration on essential aspects -&gt; ignore distracting details<ul> <li>Focus on the right solution to a problem</li> </ul> </li> <li>Technique for managing complexity</li> </ul>"},{"location":"SLHL/01/#examples-of-abstraction","title":"Examples of abstraction","text":"<p>An MRT map is an abstraction of the geographically accurate map, but it contains enough information for us to navigate the MRT system.</p> <p> </p> <p>In computer programming this can be:</p> <p></p>"},{"location":"SLHL/01/#algorithm-design","title":"Algorithm Design","text":"<p>Syllabus points</p> <ul> <li>4.2.3 Discuss an algorithm to solve a specific problem</li> </ul> <ul> <li>A plan or a set of step-by-step instructions to solve a problem<ul> <li>Each instruction is identified</li> <li>The order in which they should be carried out is planned</li> </ul> </li> <li>A starting point for computer programs</li> <li>Represented using pseudocode or flowchart</li> </ul>"},{"location":"SLHL/01/#examples-of-algorithm-design","title":"Examples of algorithm design","text":"<p>In GCSE-style pseudocode:</p> <pre><code>OUTPUT \"What is your name?\"\nINPUT name\nOUTPUT \"Hello\", name\nOUTPUT \"How old are you?\"\nINPUT age\nIF age &gt;= 70 THEN\n    OUTPUT \"You are aged to perfection!\"\nELSE\n    OUTPUT \"You are a spring chicken!\"\n</code></pre> <p>In flowchart:</p> <p></p>"},{"location":"SLHL/02a/","title":"02a Problem-Solving &amp; Java (Main)","text":""},{"location":"SLHL/02a/#thinking-procedurally","title":"Thinking procedurally","text":"<p>Syllabus points</p> <ul> <li>4.1.1 Identify the procedure appropriate to solving a problem</li> <li>4.1.2 Evaluate whether the order in which activities are undertaken will result in the required outcome</li> <li>4.1.3 Explain the role of sub-procedures in solving a problem</li> <li>4.2.6 Construct pseudocode to represent an algorithm</li> <li>4.2.7 Suggest suitable algorithms to solve a specific problem</li> <li>4.3.9 Construct algorithms using loops, branching</li> <li>4.3.12 Discuss the need for sub-programmes \u2026 within programmed solutions</li> </ul>"},{"location":"SLHL/02a/#development-phases","title":"Development phases","text":"<ol> <li>Identification: identify the problem, understand the problem, formulate the problem</li> <li>Development: explore various alternatives</li> <li>Selection: choose the best alternative</li> <li>Implementation: implement the selected solution</li> </ol>"},{"location":"SLHL/02a/#procedure","title":"Procedure","text":"<p>A subroutine that carries out a set of instructions.</p> <pre><code>Sub procedure showProduct(x, y, z)\n    Output \"The product of\", x, y, z, \"is\", x *y* z\nEnd sub\n\nCall showProduct(5, 10, 15)\n</code></pre> <p>Advantages:</p> <p>Note</p> <p>The main benefit is to prevent repetition.</p> <ul> <li>Can be used across multiple problems, not just within</li> <li>Updates ripple through (only need to change one place instead of finding all the occurrences of a code snippet)</li> <li>Well-tested &amp; reliable</li> <li>Speeds up development (no need to write out the same code every time)</li> <li>Abstraction (not concerned with implementation, just purpose)</li> </ul>"},{"location":"SLHL/02a/#function","title":"Function","text":"<p>A subroutine that carries out a set of instructions and returns a value to the program that called it.</p> <p>Attention</p> <p>Must return a value!</p> <pre><code>Sub function calcProduct(x, y, z)\n    ans = x *y* z\n    return ans\nEnd sub\n\nprod = Call calcProduct(5, 10, 15) // the return value gets stored in the variable prod\nOutput prod\n</code></pre>"},{"location":"SLHL/02a/#thinking-logically","title":"Thinking logically","text":"<p>Syllabus points</p> <ul> <li>4.1.4 Identify when decision-making is required in a specified situation</li> <li>4.1.5 Identify the decisions required for the solution to a specified problem</li> <li>4.1.6 Identify the condition associated with a given decision in a specified problem</li> <li>4.1.7 Explain the relationship between the decisions and conditions of a system</li> <li>4.1.8 Deduce logical rules for real-world situations</li> </ul>"},{"location":"SLHL/02a/#iteration","title":"Iteration","text":"<ol> <li>Counted loop: <code>FOR ... TO ... (STEP ...) NEXT</code></li> <li>Pre-condition loop: <code>WHILE ... DO ... ENDWHILE</code></li> <li>Post-condition loop: <code>REPEAT ... UNTIL</code></li> </ol>"},{"location":"SLHL/02a/#selection","title":"Selection","text":"<ol> <li><code>IF ... THEN ... ENDIF</code></li> <li><code>IF ... THEN ... ELSE ... ENDIF</code></li> <li><code>IF ... THEN ... ELSE IF ... THEN ... ELSE ... ENDIF</code></li> <li><code>SWITCH ... CASE ... ELSE ... ENDSWITCH</code></li> </ol>"},{"location":"SLHL/02a/#boolean-algebra","title":"Boolean algebra","text":"<p>Syllabus points</p> <ul> <li>2.1.11 Define the Boolean operators: AND, OR, NOT, NAND, NOR and XOR</li> <li>2.1.12 Construct truth tables using the above operators</li> <li>2.1.13 Construct a logic diagram using AND, OR, NOT, NAND, NOR and XOR gates</li> </ul> <ul> <li><code>AND</code> (<code>&amp;&amp;</code>): <code>true</code> if both operands are <code>true</code></li> <li><code>OR</code> (<code>||</code>): <code>true</code> if either operand is <code>true</code></li> <li><code>NOT</code> (<code>!</code>): <code>true</code> if the operand is <code>false</code></li> <li><code>XOR</code> (<code>^</code>): <code>true</code> if one operand is <code>true</code> and the other is <code>false</code></li> <li><code>NAND</code> (<code>&amp;&amp;</code> then <code>!</code>): <code>true</code> if both operands are <code>false</code></li> <li><code>NOR</code> (<code>||</code> then <code>!</code>): <code>true</code> if both operands are <code>false</code></li> </ul>"},{"location":"SLHL/02a/#thinking-ahead","title":"Thinking ahead","text":"<p>Syllabus points</p> <ul> <li>4.1.9 Identify the inputs and outputs required in a solution</li> <li>4.1.10 Identify pre-planning in a suggested problem and solution</li> <li>4.1.11 Explain the need for pre-conditions when executing an algorithm</li> <li>4.1.12 Outline the pre- and post-conditions to a specified problem</li> <li>4.1.13 Identify exceptions that need to be considered in a specified problem solution</li> </ul> <p>Pre-condition and post-condition comments are useful for documenting the purpose of a subroutine.</p> <pre><code>// Pre: A positive number x is passed to the function\n// Post: Calculates and returns the square root of x\nSub function sqrt(x)\n    ans = x ^ 0.5\n    return ans\nEnd sub\n</code></pre>"},{"location":"SLHL/02a/#java-problems","title":"Java problems","text":"<p>Syllabus points</p> <ul> <li>4.3.8 Analyse the use of variables, constants and operators in algorithms</li> <li>4.3.9 Construct algorithms using loops, branching</li> <li>4.3.12 Discuss the need for sub-programmes \u2026 within programmed solutions</li> <li>4.3.13 Construct algorithms using predefined sub-programmes, one-dimensional arrays and/or collections</li> </ul>"},{"location":"SLHL/02b/","title":"02b Problem-Solving &amp; Java (Project)","text":""},{"location":"SLHL/02b/#system-design-analysis","title":"System Design &amp; Analysis","text":"<p>Syllabus points</p> <ul> <li>1.2.4 Identify the relevant stakeholders when planning a new system</li> <li>1.2.5 Describe methods of obtaining requirements from stakeholders</li> <li>1.2.6 Describe appropriate techniques for gathering the information needed to arrive at a workable solution</li> <li>1.2.7 Construct suitable representations to illustrate system requirements</li> <li>1.2.8 Describe the purpose of prototypes to demonstrate the proposed system to the client</li> <li>1.2.9 Discuss the importance of iteration during the design process</li> <li>1.2.10 Explain the possible consequences of failing to involve the end-user in the design process</li> </ul> <p>Steps to design a new system:</p> <ol> <li>Determine stakeholders</li> <li>Obtain requirements</li> <li>Gather information for the new system</li> <li>Start designing/building the new system</li> </ol>"},{"location":"SLHL/02b/#stakeholders","title":"Stakeholders","text":"<p>A stakeholder is a person, group or organisation that has an interest or concern in an organisation (e.g. creditors, directors, employees, government agencies, owners/shareholders, suppliers, unions, and the community from which the business draws its resources).</p> <p>Not all stakeholders are equal (e.g. customers v.s. employees).</p> <p></p> <p>Key questions:</p> <ul> <li>Who will be affected by the new system?</li> <li>Who will the new system affect?</li> <li>Who will the end users be?</li> <li>What are their needs?</li> </ul> <p>Note</p> <p>Stakeholders may not necessarily be the end users of the system.</p> <p>Principle of utilitarianism: the greatest good for the greatest number of people.</p>"},{"location":"SLHL/02b/#obtaining-requirements","title":"Obtaining requirements","text":"<p>Methods of obtaining requirements:</p> <ul> <li>Direct observation</li> <li>Interviews</li> <li>Surveys</li> <li>Collecting documents</li> </ul>"},{"location":"SLHL/02b/#direct-observation","title":"Direct observation","text":"<p>Direct observation is the process of watching people as they perform their tasks.</p> <ul> <li>Advantages<ul> <li>Possibility of gathering first-hand, unbiased information</li> </ul> </li> <li>Disadvantages<ul> <li>People may work differently when being observed (Hawthorne effect)</li> </ul> </li> </ul>"},{"location":"SLHL/02b/#interviews","title":"Interviews","text":"<p>Interviews are face-to-face conversations that focus on obtaining reliable and valid data in the form of verbal responses from a person or a group of stakeholders.</p> <p>They can be structured (pre-planned, the same set of questions to each stakeholder) or unstructured (flexible, encouraging stakeholders to freely express their thoughts and personal beliefs).</p> <ul> <li>Advantages<ul> <li>Allows a lot of very detailed information to be gathered</li> <li>Questions can be asked to clarify information</li> <li>Non-verbal communication can be observed</li> </ul> </li> <li>Disadvantages<ul> <li>Time-consuming</li> <li>Yields data that is difficult to summarise, evaluate and analyse</li> </ul> </li> </ul>"},{"location":"SLHL/02b/#surveys","title":"Surveys","text":"<p>Surveys involve handing out questionnaires to respondents. They should be carefully constructed to elicit unambiguous responses.</p> <p>They can be closed/restricted, where the respondent is given a list of possible answers to choose from (yes/no, box-checking), or open/unrestricted, which involve free response questions. The former is easier to analyse, but the latter can provide more detailed information.</p> <ul> <li>Advantages<ul> <li>A large amount of data from a large group can be gathered</li> <li>Guarantees uniformity</li> <li>Easier to analyse (if closed)</li> <li>Time-saving</li> </ul> </li> <li>Disadvantages<ul> <li>Questions may suggest misleading/biased answer</li> <li>Response rate and quality of responses are not guaranteed</li> <li>Respondents may misinterpret questions</li> </ul> </li> </ul>"},{"location":"SLHL/02b/#collecting-documents","title":"Collecting documents","text":"<p>Collecting documents is the process of looking into existing documents (e.g. user manuals, specifications, etc.) to find out how the current system works.</p> <ul> <li>Advantages<ul> <li>Detailed information about the present system can be gathered</li> <li>It can be seen where the old system has problems</li> </ul> </li> <li>Disadvantages<ul> <li>Time-consuming</li> <li>Just looking at the forms/outputs may be confusing</li> </ul> </li> </ul>"},{"location":"SLHL/02b/#understanding-the-situation","title":"Understanding the situation","text":"<ul> <li>Examining current systems<ul> <li>Who does what?</li> <li>How do they do that? (hardware, software, network, peripherals, human resources)</li> </ul> </li> <li>Looking for competing products<ul> <li>Identify \u201cgaps\u201d in the market</li> <li>Informing decisions around design choices, pricing and marketing strategies</li> <li>Provide insights into customer preferences and expectations.</li> </ul> </li> </ul> <p>Intellectual property</p> <p>You own intellectual property if you:</p> <ul> <li>created it (and it meets the requirements for copyright, a patent or a design)</li> <li>bought intellectual property rights from the creator or a previous owner</li> <li>have a brand that could be a trade mark, e.g. a well-known product name</li> </ul> <ul> <li>Organisational abilities<ul> <li>Can the client afford a new system/new equipment?</li> <li>Can the staff use the new system? Is training needed?</li> <li>Can the client have any \u2018downtime\u2019 to upgrade?</li> </ul> </li> <li>Literature search<ul> <li>The process of searching for information in books, journals, magazines, newspapers, etc.</li> </ul> </li> </ul>"},{"location":"SLHL/02b/#types-of-illustrations","title":"Types of illustrations","text":"<ul> <li>System flow chart</li> <li>Data flow diagram</li> <li>Structure chart</li> </ul> <p>A flow chart is a diagram that shows the sequence of steps in a process using different symbols linked with arrows.</p> <p></p> <p>A data flow diagram maps out the flow of information for any process or system. It uses symbols, such as rectangles, circles and arrows, with text labels to show data inputs, outputs, storage points and the route that data takes through the system.</p> <p></p> <p>A structure chart represents the organisation of a system, showing the parts in hierarchical order.</p> <p>Other types of diagrams include UML and wireframes.</p>"},{"location":"SLHL/02b/#prototype","title":"Prototype","text":"<p>Prototypes are abstract representations of a system that often focuses on only one or two key aspects. They are important in testing and illustrating the proposed system to the client.</p> <p>Purposes of prototypes:</p> <ul> <li>Fail early and inexpensively<ul> <li>Quickly weed out the approaches that don\u2019t work to focus on the ones that do</li> </ul> </li> <li>Gather more accurate requirements<ul> <li>Interviews and focus groups can fall short because many people find it difficult to conceptualise a product before they see it</li> <li>Prototypes can demonstrate the functionality to help solidify requirements for the final design</li> </ul> </li> <li>Technically understand the problem<ul> <li>Prototype address both the foreseen and the unforeseen technical challenges of a device\u2019s design</li> </ul> </li> <li>Resolve conflicts</li> <li>Rally financial support</li> <li>File patents</li> </ul> <p></p>"},{"location":"SLHL/02b/#iteration","title":"Iteration","text":"<p>Iteration is the process of repeating a process to improve it.</p> <p></p>"},{"location":"SLHL/02b/#end-user-involvement","title":"End-user involvement","text":"<p>Not involving the end user in the design process can lead to:</p> <ul> <li>Unsatisfactory results</li> <li>Unsuitable solutions for the user\u2019s problem, affecting the user\u2019s productivity</li> </ul> <p></p>"},{"location":"SLHL/02b/#human-computer-interaction-hci","title":"Human-Computer Interaction (HCI)","text":"<p>Syllabus points</p> <ul> <li>1.2.12 Define the term usability</li> </ul>"},{"location":"SLHL/02b/#ergonomics","title":"Ergonomics","text":"<p>Ergonomics is the scientific discipline that studies the interaction between humans and other elements of a system to optimize human well-being and overall system performance (how well the form fits the function).</p>"},{"location":"SLHL/02b/#accessibility","title":"Accessibility","text":"<p>Accessibility is the design of products, devices, services, or environments for people who experience disabilities. This includes specialist peripherals and software such as:</p> <ul> <li>Braille keyboards</li> <li>Eye-typers</li> <li>Accessible controllers</li> <li>Screen readers</li> <li>Voice synthesizers</li> </ul>"},{"location":"SLHL/02b/#usability","title":"Usability","text":"<p>Usability is the ease of use and learnability of a product, system or service. It consists of both ergonomics and accessibility.</p> <p></p> <p>Components of usability include:</p> <ul> <li>Learnability: how easy is it to learn how to use the system?</li> <li>Efficiency: how quickly can the system be used?</li> <li>Memorability: how easy is it to remember how to use the system?</li> <li>Errors: what is the rate of user errors when using the system?</li> <li>Satisfaction: how satisfied are users with the system?</li> </ul>"},{"location":"SLHL/02b/#utility","title":"Utility","text":"<p>Utility refers to how well the design\u2019s functionality meets the user\u2019s needs.</p> <p>A useful product fulfils both usability and utility. It is not useful if it is easy to use but does not meet the user\u2019s needs, nor is it useful if it meets the user\u2019s needs but is difficult to use.</p>"},{"location":"SLHL/02b/#planning-system-installation","title":"Planning &amp; System Installation","text":"<p>Syllabus points</p> <ul> <li>1.1.7 Suggest various types of testing</li> </ul> <p>Testing is important because it can identify errors and defects in the system. It is also a way to evaluate the system.</p> <p>A system that does not work as expected can reduce productivity and end-user satisfaction.</p>"},{"location":"SLHL/02b/#components-of-software-testing","title":"Components of software testing","text":"<ul> <li>Functionality testing</li> <li>User experience testing</li> <li>Performance and load testing</li> <li>Compatibility testing</li> <li>Security testing</li> <li>Test management and automation</li> </ul>"},{"location":"SLHL/02b/#types-of-test-data","title":"Types of test data","text":"<ul> <li>Normal data: data that is expected to be entered into the system (should be accepted)</li> <li>Boundary data: data that is on the edge of the range of values that the system is designed to handle (should be accepted)</li> <li>Abnormal data: data that is not expected to be entered into the system, such as data outside a range or of an incorrect type (should be rejected)</li> </ul>"},{"location":"SLHL/02b/#debugging","title":"Debugging","text":"<p>Debugging is the process of finding and removing errors from a program.</p>"},{"location":"SLHL/02b/#automated-testing","title":"Automated testing","text":"<p>Automated testing is the process of automating the testing process to reduce the time and effort required to test a system. It makes use of tools that control the execution of test cases and compare the results with the expected results.</p>"},{"location":"SLHL/02b/#dry-run-testing","title":"Dry-run testing","text":"<p>Dry-run testing is the process of simulating the actual use of a system to test its functionality and performance, conducted using pen and paper or a prototype.</p>"},{"location":"SLHL/02b/#static-and-dynamic-testing","title":"Static and dynamic testing","text":"<p>Static testing is the process of examining the source code of a program to find errors without executing it. It is often implicit (e.g. code review, proofreading, linting) and involves verification.</p> <p>Dynamic testing is the process of executing the program with a given set of test cases to find errors. It may begin before the program is complete to test particular components. It involves validation.</p> <p>These together help improve software quality.</p>"},{"location":"SLHL/02b/#alpha-and-beta-testing","title":"Alpha and beta testing","text":"<p>Alpha testing is performed by testers who are usually internal employees at the developer\u2019s site before the system is released to the client.</p> <p>Beta testing is performed by testers who are usually external clients/end users at the client location for them to give comments and suggestions.</p>"},{"location":"SLHL/02b/#black-box-and-white-box-testing","title":"Black-box and white-box testing","text":"<p>Black-box testing is the process of testing a system from the user\u2019s perspective, treating it as a black box without knowing its internals. It is also known as functional testing. Tests are using software interfaces and ensuring they work as expected.</p> <p>White-box testing is the process of testing a system from the developer\u2019s perspective, using the knowledge of its workings. It is also known as structural testing.</p> <p></p>"},{"location":"SLHL/02b/#unit-and-integration-testing","title":"Unit and integration testing","text":"<p>Unit testing is the process of testing a single component of a system to ensure that it works as expected.</p> <p>Integration testing is the process of testing the interaction between components of a system to ensure that they work together as expected.</p>"},{"location":"SLHL/02b/#user-acceptance-testing","title":"User acceptance testing","text":"<p>User acceptance testing is performed by the client to determine whether or not the system meets their requirements. This is the final stage of testing before the system is released to the client.</p> <p>It differs from usability testing in that it tests whether the system meets the client\u2019s requirements, whereas usability testing tests whether the system is functional.</p>"},{"location":"SLHL/03a/","title":"03a User Focus","text":"<p>Syllabus points</p> <ul> <li>1.1.8 Describe the importance of user documentation</li> <li>1.1.9 Evaluate different methods of providing user documentation</li> <li>1.1.10 Evaluate different methods of delivering user training</li> </ul> <p>User documentation is any document that explains how to use the features and functions of a system.</p>"},{"location":"SLHL/03a/#end-user-documentation","title":"End-user documentation","text":"<p>End-user documentation refers to the documentation for a product or service provided to the end users. The end-user documentation is designed to assist end users to use the product or service. This is often referred to as user assistance. The end-user documentation is a part of the overall product delivered to the customer.</p> <p>Attention</p> <p>The end-user documentation does not involve detailed explanations of how the system works - the users only need to know how to use the system.</p> <p>These guides need to be precise and easy to understand. In addition, well-written end-user documentation will help provide the best user experience. The quality of the user documentation can greatly affect the rate of implementation of (how fast users start using) the new system.</p>"},{"location":"SLHL/03a/#importance-of-end-user-documentation","title":"Importance of end-user documentation","text":"<p>Users can learn:</p> <ol> <li>how to use your software</li> <li>features of your software</li> <li>tips and tricks for your software</li> <li>how to resolve common problems with your software</li> </ol> <p>Without detailed, simple, clear instructions, users might be unaware of particular features or unable to use features that are not immediately obvious.</p> <p>A well-made user documentation guides the user through using the system and thus increases productivity. If the user documentation is simple, system implementation can happen faster because users require less training to learn how to use the new system.</p>"},{"location":"SLHL/03a/#components-of-end-user-documentation","title":"Components of end-user documentation","text":"<p>Users expect the end-user documentation to include:</p> <ul> <li>FAQs</li> <li>Video tutorials</li> <li>Embedded assistance (for example, tooltips and dynamic page content)</li> <li>Support portals</li> </ul> <p>It usually includes:</p> <ul> <li>Minimum hardware and software requirements</li> <li>Installation guide</li> <li>How to start the system</li> <li>How to use different features of the system</li> <li>Screenshots explaining the main features of the system</li> <li>Example inputs and outputs</li> <li>Explanations of error messages and troubleshooting guides</li> <li>Information to contact the developer of the system if an undocumented question arises</li> </ul>"},{"location":"SLHL/03a/#types-of-end-user-documentation","title":"Types of end-user documentation","text":""},{"location":"SLHL/03a/#help-files","title":"Help files","text":"<p>Files supplied together with the system. They can usually be called up with a button in the system.</p> <ul> <li>Advantages<ul> <li>User-friendly (give general instructions on how to use the system and how to solve some major errors)</li> <li>Fast</li> <li>Easy to use (accessible at any time when using the program)</li> <li>Can be accessed offline</li> </ul> </li> <li>Disadvantages<ul> <li>Can only be used after the system has been installed (can\u2019t give any help when installing the solution)</li> <li>Might not be detailed (often only deal with very general errors)</li> <li>Might be hard to find (lack a search capability)<ul> <li>(Even with search) the user might not know what to search for</li> </ul> </li> </ul> </li> </ul>"},{"location":"SLHL/03a/#online-support","title":"Online support","text":"<p>Special web service hosted by the system\u2019s developer to provide user documentation.</p> <ul> <li>Advantages<ul> <li>A larger amount of information</li> <li>Easier to update (continuously revised to deal with the problems occurring most often/FAQs)</li> <li>Can provide the option for live support (talking to a real human operator)</li> <li>Often have search capabilities built-in</li> <li>Can be accessed from any device</li> <li>Can be faster</li> </ul> </li> <li>Disadvantages<ul> <li>Can\u2019t be accessed offline/with a slow internet connection</li> <li>Live support does not work quite well with users unfamiliar with computers when they have to explain their problem</li> </ul> </li> </ul>"},{"location":"SLHL/03a/#printed-manuals","title":"Printed manuals","text":"<p>Manuals printed on paper and supplied together with the system.</p> <ul> <li>Advantages<ul> <li>Can be read through by users before starting to work with the new system</li> <li>Easy to find</li> <li>Work without a computer (always available)</li> <li>Give help installing the system</li> </ul> </li> <li>Disadvantages<ul> <li>Often limited to a little booklet supplying little information apart from how to install the system</li> <li>Slower</li> <li>Can be lost/misplaced/limited in number</li> <li>Harder to search</li> <li>Cannot be updated</li> <li>Prone to physical destruction</li> </ul> </li> </ul>"},{"location":"SLHL/03a/#technical-documentation","title":"Technical documentation","text":"<p>Technical documentation addresses the system administrator\u2019s needs. Usually, this document contains information that will help in product maintenance, such as installation and updates.</p> <p>Technical documentation refers to the documentation that describes how a product or service operates. For example, software code documentation, technical specifications and API documentation. Technical documentation can also describe how to install the software.</p>"},{"location":"SLHL/03a/#components-of-technical-documentation","title":"Components of technical documentation","text":"<ul> <li>Descriptions of functions</li> <li>System admin guide</li> </ul>"},{"location":"SLHL/03a/#user-training","title":"User training","text":"<p>Training end-users in using a new system is very important as productivity greatly depends on how familiar they are with a system. Effective user training is an essential part of introducing a new system.</p>"},{"location":"SLHL/03a/#types-of-user-training","title":"Types of user training","text":""},{"location":"SLHL/03a/#self-introduction","title":"Self-introduction","text":"<p>Users can learn how to use a new system on their own, provided they have the right material to learn from. It can take the form of reading a manual or watching a tutorial.</p> <ul> <li>Advantages<ul> <li>Low cost (only materials needed, no teachers/buildings)</li> <li>Flexible timeline</li> <li>Training tailored to exactly what users want to learn</li> </ul> </li> <li>Disadvantages<ul> <li>With no guidance, users might feel lost/overwhelmed</li> <li>Unstructured learning means certain features might be misunderstood/ignored</li> </ul> </li> </ul>"},{"location":"SLHL/03a/#formal-classes","title":"Formal classes","text":"<p>Users sit in a classroom and listen to an instructor who shows and explains how to use the system. This type of training is useful to train large amounts of staff as it is effective and relatively cheap, but if the size of the classes is too big, there is little time to deal with individual problems and questions.</p> <ul> <li>Advantages<ul> <li>Structured learning environment</li> <li>Expert on hand to answer questions</li> <li>Curriculum designed to teach all aspects, including ones that might be misunderstood or difficult to grasp</li> </ul> </li> <li>Disadvantages<ul> <li>Expensive (teachers, buildings and facilities needed)</li> <li>Rigid schedule and curriculum</li> <li>Not much personalisation is possible</li> </ul> </li> </ul>"},{"location":"SLHL/03a/#remoteonline-training","title":"Remote/Online training","text":"<p>An instructor training one user or a small group of users by some kind of remote connection (Skype, Google Meet, Zoom, etc). This is the most effective way of training as training can be suited to users\u2019 needs and abilities while being instructed by a professional that caters to specific needs.</p> <ul> <li>Advantages<ul> <li>Structured learning environment</li> <li>Expert on hand to answer questions</li> <li>Curriculum designed to teach all aspects, including ones that might be misunderstood or difficult to grasp</li> <li>Flexible locations</li> </ul> </li> <li>Disadvantages<ul> <li>Expensive (teachers &amp; internet connection needed)</li> <li>Can feel \u201cremote\u201d with no quick \u201chands-on\u2019</li> <li>Has to be computer-based</li> </ul> </li> </ul>"},{"location":"SLHL/03b/","title":"03b OS &amp; Applications","text":"<p>Syllabus points</p> <ul> <li>2.1.6 Describe the main functions of an operating system.</li> <li>2.1.7 Outline the use of a range of application software, including:<ul> <li>Word processors,</li> <li>Spreadsheets,</li> <li>Database management systems,</li> <li>Email,</li> <li>Web browsers,</li> <li>Computer-aided design (CAD) and</li> <li>Graphic processing software.</li> </ul> </li> <li>2.1.8 Identify common features of applications, which include:<ul> <li>toolbars,</li> <li>menus,</li> <li>dialogue boxes,</li> <li>graphical user interface (GUI) components.</li> </ul> </li> </ul>"},{"location":"SLHL/03b/#hierarchy-of-software","title":"Hierarchy of software","text":"<pre><code>graph LR\n    sw[Software] --- sys[System Software] --- os[Operating System] &amp; util[Utilities] &amp; lib[Drivers/Libraries]\n\n    sw --- app[Application Software] --- word[Word Processors] &amp; sheet[Spreadsheets] &amp; dbms[\"Database Management Systems (DBMS)\"] &amp; email[Email Clients] &amp; broser[Web Browsers] &amp; cad[\"Computer Aided Design (CAD)\"] &amp; graphic[Graphic Processing Software]</code></pre>"},{"location":"SLHL/03b/#system-software","title":"System software","text":"<p>System software is a program (or sequence of instructions) designed to manage or maintain a computer, its peripherals and its performance. It only exists because computers exist.</p> <p></p> <ul> <li>Provides a user interface</li> <li>Does memory management</li> <li>Does peripheral management</li> <li>Allows multi-tasking</li> <li>Provides security</li> </ul>"},{"location":"SLHL/03b/#user-interface","title":"User interface","text":"<p>OS has to provide a link between the user and the computer hardware so it is easy to interact with the computer.</p> <ul> <li>Graphical User Interface (GUI) has menus and icons</li> <li>Command Line Interface (CLI) where the user types in code</li> <li>Natural Language Interface (NLI) where the user speaks to the interface</li> <li>Menu-Based Interface (MBI) which gives the user a selection of options</li> </ul> Difference CLI GUI Ease of use Difficult Easy Memory consumption Low High Precision High Low Speed Faster Slower Peripherals Keyboard Mouse and keyboard Pointing devices No Yes Appearance modifiable? Yes No Input At a command prompt Anywhere on the screen Presentation Plain text and files Any form (e.g. plain text, videos, images, etc.) Graphics No Yes Multitasking Some, complicated to see several things on one screen Easily observe and operate various things at once <p> </p> GUI example <p> </p> CLI example <p> </p> NLI example <p> </p> MBI example"},{"location":"SLHL/03b/#memory-management","title":"Memory management","text":"<p>Memory management is done by keeping track of storage devices (like HDD) and controlling which application has access to which area of memory (RAM).</p> <p>Each location in memory can be read, modified, and written to by the OS. When the memory location is full the OS sends a confirmation message.</p> <p>Similarly, the OS provides file management services by sorting out where data is stored on disk drives and memory. The OS allows users to organise files in folders as well as to copy and delete files.</p> <p> </p> A file manager <p> </p> Memory management"},{"location":"SLHL/03b/#peripheral-management","title":"Peripheral management","text":"<p>Keyboard, mouse, monitor and printers are controlled through device drivers. A device driver is a software program which allows hardware devices to be used by the OS. They act as translators between the devices and the computer system.</p> <p></p>"},{"location":"SLHL/03b/#multitasking","title":"Multitasking","text":"<p>The OS coordinates the working of different programs by allocating the CPU time between different programs based on the time and priority of the software application.</p> <p>Each task running is given a slice of time or a turn on the CPU. Each task has to wait its turn unless it is given a higher priority by the OS in which case it gets more or longer time slices.</p> <p></p>"},{"location":"SLHL/03b/#security","title":"Security","text":"<p>OS prevents unauthorised access. It ensures the security of the system through usernames and passwords. It protects files from other users reading or writing them.</p> <p> </p> A password prompt <p> </p> A file security warning <p> </p> File permission properties"},{"location":"SLHL/03b/#application-software","title":"Application software","text":"<p>Application software is a program (or sequence of instructions) to allow a user to complete a task. This task would exist even without a computer (e.g. Write a letter, do some calculations, listen to music, do some research).</p> <ul> <li>Word processor: a program for storing, manipulating, and formatting text entered from a keyboard and providing a printout (e.g. Microsoft Word)</li> <li>Spreadsheet: a program in which data is arranged in the rows and columns of a grid and can be manipulated and used in calculations (e.g. Microsoft Excel)</li> <li>Database management system (DBMS): system software for creating and managing databases; provides users and programmers with a systematic way to create, retrieve, update and manage data (e.g. MySQL)</li> <li>Email client: a computer program used to access and manage a user\u2019s email (e.g. Thunderbird)</li> <li>Web browser: a software application for retrieving, presenting, and traversing information resources on the World Wide Web (e.g. Google Chrome)</li> <li>Computer-aided design (CAD): a program that uses computer systems to assist in the creation, modification, analysis, or optimization of a design (e.g. AutoCAD)</li> <li>Graphic processing software: a program or collection of programs that enable a person to manipulate visual images on a computer (e.g. Adobe Photoshop)</li> </ul>"},{"location":"SLHL/03b/#features-of-gui-applications","title":"Features of GUI applications","text":"<ul> <li>Toolbars</li> <li>Menus</li> <li>Dialogue Boxes</li> <li>GUI components</li> </ul> <p>Certain parts of the interface are provided by libraries in the OS and certain parts are specific to each application (e.g. the menu bar and buttons are standard, but the specifics/icons are up to the individual application).</p> <p></p>"},{"location":"SLHL/03c/","title":"03c Number Systems &amp; Data Representation","text":"<p>Syllabus points</p> <ul> <li>2.1.9 Define the terms: bit, byte, binary, denary/decimal, hexadecimal</li> <li>2.1.10 Outline the way in which data is represented in the computer</li> </ul>"},{"location":"SLHL/03c/#applications-of-number-systems","title":"Applications of Number Systems","text":"<p>Hexadecimal: easier to convert to and from binary than decimal and easier to work with than binary in terms of remembering, accuracy and checking.</p>"},{"location":"SLHL/03c/#machine-code","title":"Machine code","text":"<ul> <li>Consists of only 1s and 0s (binary)</li> <li>Different for different groups of processors</li> <li>Sometimes able to enter the hexadecimal equivalent - faster and more accurate</li> </ul>"},{"location":"SLHL/03c/#assembly-language","title":"Assembly language","text":"<ul> <li>Same structure as machine code</li> <li>Mnemonics instead of binary numbers</li> <li>1-1 machine code conversion</li> </ul>"},{"location":"SLHL/03c/#media-access-control-mac-addresses","title":"Media Access Control (MAC addresses)","text":"<ul> <li>The physical address of a Network Interface Card (NIC)</li> <li>Used to uniquely identify a computer when connecting to a network</li> <li>Put on to the NIC by the manufacturer when the device is made<ul> <li>Cannot be changed</li> <li>Different to an IP address (given to a device on a network by the network itself and can change)</li> </ul> </li> <li>6 groups of 2 hexadecimal digits (e.g. <code>00:3E:E1:C4:5D:DF</code>)<ul> <li>2 hex digits/byte \u2192 6 bytes/address</li> </ul> </li> </ul> <p>Hex MAC address &gt; decimal because</p> <ul> <li>Converts to the binary equivalent digit-by-digit (no need to do the whole number at once)</li> <li>12 digits can store \\(2^48 = 281,474,976,710,656\\) different combinations</li> </ul>"},{"location":"SLHL/03c/#html-colours","title":"HTML colours","text":"<ul> <li>HTML is a markup language used to create web pages</li> <li>RGB colour mode: the amount of R, G, B divided into 256 levels \u2192 described by 2 hex digits; each colour \u2192 three pairs of hex numbers ranging from 0 to F</li> </ul>"},{"location":"SLHL/03c/#registers-and-values","title":"Registers and values","text":"<ul> <li>Registers can hold a certain number of bits of binary \u2192 can work out what values should be held/are already held</li> </ul>"},{"location":"SLHL/04/","title":"04 OOP Intro + Java","text":""},{"location":"SLHL/04/#4-pillars-of-oop","title":"4 Pillars of OOP","text":"<p>Syllabus points</p> <ul> <li>D.2.1 Define the term encapsulation</li> <li>D.2.2 Define the term inheritance</li> <li>D.2.3 Define the term polymorphism</li> <li>D.2.4 Explain the advantages of encapsulation</li> <li>D.2.5 Explain the advantages of inheritance</li> <li>D.2.6 Explain the advantages of polymorphism</li> </ul> <ul> <li>Abstraction: hiding the complexity of an object from the outside world</li> <li>Encapsulation: wrapping the data and methods that manipulate the data into a single unit</li> <li>Inheritance: extending the functionality of a \u201csuper\u201d/\u201dparent\u201d class by including the attributes and methods in a \u201csub\u201d/\u201dchild\u201d class</li> <li> <p>Polymorphism: using an independent implementation of a method/interface (methods with the same name) across different child classes and the parent class to modify its behaviour</p> </li> <li> <p>Advantages of OOP</p> <ul> <li>Reusability: allows for reuse of code</li> <li>Modularity: allows for separation of concerns (e.g. different classes for different functionalities)</li> <li>Extensibility: allows for the extension of code</li> <li>Maintainability: allows for easier maintenance of code</li> </ul> </li> <li>Disadvantages of OOP<ul> <li>Complexity: can be too complex for small problems (more lines of code)<ul> <li>Design principles are very abstract/hard to implement</li> </ul> </li> <li>Performance: can be slower to run than procedural code</li> <li>Memory: can consume more memory due to the use of objects</li> </ul> </li> </ul> <p>Advantage of using libraries for objects: time-saving (algorithms do not have to be reinvented)</p>"},{"location":"SLHL/04/#concept-of-an-object","title":"Concept of an Object","text":"<p>Syllabus points</p> <ul> <li>D.1.1 Outline the general nature of an object</li> <li>D.1.2 Distinguish between an object (definition, template or class) and instantiation</li> <li>D.1.9 Explain the need for different data types to represent data items</li> <li>D.1.10 Describe how data items can be passed to and from actions as parameters</li> </ul> <ul> <li>Class: a blueprint/template for an object</li> <li>Object: a specific instance of a class</li> <li>Attributes: variables that describe the states of the object</li> <li>Methods: functions that describe the behaviours of the object</li> <li>Class-level attributes/methods: attributes/methods that are shared by all objects of the class (<code>static</code>)</li> <li>Constructor: a special method that is called when an object is created (instantiated)<ul> <li>It initialises the object (sets the initial values of the instance variables)</li> <li>It does not have a return type</li> </ul> </li> <li>Accessor/getter: a method that returns the value of an attribute</li> <li>Mutator/setter: a method that sets the value of an attribute</li> <li>Parameter: a variable that is used in a method definition</li> <li>Signature: the name and parameter types of a method</li> <li>Overloading: defining multiple methods with the same name but different signatures</li> <li>Access modifiers (see below)</li> </ul> <pre><code>graph LR\n    cls(Class) -- blueprint for/instantiates --&gt; obj(Object)\n    obj -- instance of --&gt; cls\n    cls -- has --&gt; cst(Constructor)\n    cst -- constructs --&gt; cls\n    cst -- special type of --&gt; mtd(Method)\n    cls -- \"has (using &lt;code&gt;static&lt;/code&gt;)\" --&gt; cla(Class-level attribute)\n    cla -- defines the state of --&gt; cls\n    cla -- type of --&gt; atr(Attribute)\n    cls -- \"has (using &lt;code&gt;static&lt;/code&gt;)\" --&gt; clm(Class-level method)\n    clm -- defines the behaviour of --&gt; cls\n    clm -- type of --&gt; mtd\n\n    obj -- has --&gt; atr\n    atr -- defines the state of --&gt; obj\n    obj -- has --&gt; mtd\n    mtd -- defines the behaviour of --&gt; obj\n\n    mtd -- has --&gt; Parameter\n    mtd -- implements --&gt; sig(Signature)\n    sig -- identifies --&gt; mtd\n    mtd -- may be --&gt; acc(Accessor/getter)\n    acc -- type of --&gt; mtd\n    acc -- returns --&gt; atr\n    mtd -- may be --&gt; mtt(Mutator/setter)\n    mtt -- type of --&gt; mtd\n    mtt -- sets --&gt; atr\n    mtd -- may be --&gt; Overloading\n\n    subgraph mod[Access modifers]\n        direction LR\n        pub(&lt;code&gt;public&lt;/code&gt;)\n        pri(&lt;code&gt;private&lt;/code&gt;)\n        pro(&lt;code&gt;protected&lt;/code&gt;)\n        def(&lt;code&gt;default&lt;/code&gt;)\n    end\n    atr -- may be --&gt; mod\n    mtd -- may be --&gt; mod</code></pre> <pre><code>public class Person {\n    // Class-level attributes\n    private static int count = 0;\n\n    // Instance-level attributes\n    private String name;\n    private int age;\n\n    // Constructor\n    public Person(String name, int age) {\n        // `this` refers to the current object\n        this.name = name;\n        this.age = age;\n    }\n\n    // Overloaded constructor\n    public Person(String name) {\n        // Calls the constructor above\n        this(name, 0);\n    }\n\n    // Accessor\n    public String getName() {\n        return name;\n    }\n\n    // Mutator\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n</code></pre> <p>Advantage of having signatures: the programmer can program more effectively since they would know the required arguments of the desired method and its return type.</p>"},{"location":"SLHL/04/#classes-vs-objects","title":"Classes vs Objects","text":"<ul> <li>Similarities<ul> <li>Both can have attributes and methods</li> <li>Both can have access levels</li> </ul> </li> <li>Differences<ul> <li>Classes are blueprints/templates for objects</li> <li>Classes do not allocate memory when they are created, but objects do</li> <li>Classes are declared using the <code>class</code> keyword, but objects are created using the <code>new</code> keyword</li> <li>Classes are created once, but objects can be created multiple times</li> </ul> </li> </ul>"},{"location":"SLHL/04/#this-keyword","title":"<code>this</code> keyword","text":"<p><code>this</code> keyword can be very useful in the handling of variable hiding (when a local variable has the same name as an instance variable).</p> <pre><code>public class Person {\n    private String name;\n\n    public Person(String name) {\n        // `this` refers to the current object\n        this.name = name;\n    }\n}\n</code></pre> <p><code>this</code> can also be used to call another constructor in the same class when overloading (explicit constructor invocation).</p> <pre><code>public class Person {\n    private String name;\n\n    public Person(String name) {\n        // `this` refers to the current object\n        this.name = name;\n    }\n\n    // Overloaded constructor\n    public Person(String name) {\n        // Calls the constructor above\n        this(name, 0);\n    }\n}\n</code></pre> <p>Attention</p> <ul> <li><code>this</code> keyword can only be the first statement in the constructor.</li> <li>A constructor can have either <code>this</code> or <code>super</code> keyword, but not both.</li> <li><code>this</code> cannot be used in a static context, as static code is not associated with any object.</li> </ul>"},{"location":"SLHL/04/#static-keyword","title":"<code>static</code> keyword","text":"<p>Summary</p> <ul> <li>Static (class-level) attributes and methods include keyword <code>static</code> and can be <code>public</code> or <code>private</code>.</li> <li>Static variables belong to a class, not the objects of the class, but are shared by all objects.</li> <li>Static variables are accessed with <code>ClassName.variableName</code>.</li> <li>Instance variables can access or change the values of static variables. Static variables cannot access or change instance variables, but they can access or change the values of other static variables.</li> </ul> <p>The <code>static</code> keyword is used to create class-level attributes/methods that belong to the class itself and are shared by all objects of the class.</p> <p>Static attributes and methods can be <code>public</code> or <code>private</code>, and the <code>static</code> keyword is usually placed after the access modifiers.</p> <pre><code>public class Person {\n    // Class-level attributes\n    private static int count = 0;\n\n    public static int getCount() {\n        return count;\n    }\n\n    public static void setCount(int count) {\n        Person.count = count;\n    }\n}\n\n// Accessing static attributes/methods\nPerson.setCount(10);\nSystem.out.println(Person.getCount());\n\n// You can also access static attributes/methods using an object\nPerson p = new Person();\np.setCount(10);\nSystem.out.println(p.getCount());\n\n// Static variables are shared by all objects\nPerson p1 = new Person();\nPerson p2 = new Person();\np1.setCount(10);\nSystem.out.println(p2.getCount()); // 10\n</code></pre> Feature Non-static/instance variable Static/class variable Keyword None <code>static</code> Memory allocation Multiple times (whenever a new object is created) Only once (when class is created) Scope Specific to an object Common for every object of the same class Accessed with Object reference (<code>obj.var</code>) Class reference (<code>Cls.var</code>)"},{"location":"SLHL/04/#static-blocks","title":"<code>static</code> blocks","text":"<p><code>static</code> blocks are used to initialise static attributes all at once. They are executed once when the class is loaded.</p> <pre><code>public class Person {\n    private static int count = 0;\n\n    static {\n        count = 10;\n    }\n\n    // You can even execute code here\n    static {\n        System.out.println(\"Hello world!\");\n        count = 20;\n    }\n}\n</code></pre>"},{"location":"SLHL/04/#record-handling-and-using-arrays","title":"Record handling and using arrays","text":"<p>A record is essentially the same as a Java object that has instance variables only, but no instance methods. The data items in a record (instance variables) are called the fields of the record. Each item is referred to using a field name (names of the instance variables).</p> <p>The distinguishing characteristics of a record are that the data items in the record are referred to by name and that different fields in a record are allowed to be of different types (compared to arrays, where all elements are referred to by index and must be of the same type).</p> <pre><code>public class Person {\n    // Fields\n    private String name;\n    private int age;\n    private String address;\n    private String phone;\n\n    // Constructor\n    public Person(String name, int age, String address, String phone) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n        this.phone = phone;\n    }\n\n    public String toString() {\n        return \"Name: \" + name + \", Age: \" + age + \", Address: \" + address + \", Phone: \" + phone;\n    }\n}\n</code></pre>"},{"location":"SLHL/04/#constructors-accessors-mutators","title":"Constructors, Accessors &amp; Mutators","text":"<p>Syllabus points</p> <ul> <li>D.3.1 Define the terms: class, identifier, primitive, instance variable, parameter variable, local variable</li> <li>D.3.2 Define the terms: method, accessor, mutator, constructor, \u2026 return value</li> <li>D.3.3 Define the terms: private, \u2026 public, \u2026 static</li> <li>D.3.4 Describe the uses of the primitive data types and the reference class string</li> </ul> <p>See above for definitions.</p>"},{"location":"SLHL/04/#unified-modeling-language-uml","title":"Unified Modeling Language (UML)","text":"<p>Syllabus points</p> <ul> <li>D.1.3 Construct unified modelling language (UML) diagrams to represent object designs</li> <li>D.1.4 Interpret UML diagrams</li> <li>D.1.5 Describe the process of decomposition into several related objects</li> <li>D.1.6 Describe the relationships between objects for a given problem</li> <li>D.1.7 Outline the need to reduce dependencies between objects in a given problem</li> <li>D.1.8 Construct related objects for a given problem</li> <li>D.1.10 Describe how data items can be passed to and from actions as parameters</li> </ul> <p>A Unified Modeling Language (UML) diagram is a graphical representation of a system. It is a standard way of visualizing a software system using a collection of diagrams.</p>"},{"location":"SLHL/04/#class-diagram","title":"Class diagram","text":"<p>A class diagram is a static view of a system. It shows the classes and their attributes, operations (or methods), and the relationships among objects. It is the building block of object-oriented analysis and design.</p> <p>The class diagram has three main components:</p> <ul> <li>Top: Class name, bold and centred</li> <li>Middle: Attributes, left-aligned</li> <li>Bottom: Methods, left-aligned</li> </ul> <pre><code>classDiagram\n    class ClassName {\n        +attribute1: type1\n        +method1(): returnType1\n    }</code></pre> <p>The visibility (see Access modifiers) of the attribute/method is indicated by a symbol:</p> <ul> <li><code>+</code>: <code>public</code></li> <li><code>-</code>: <code>private</code></li> <li><code>#</code>: <code>protected</code></li> <li><code>~</code>: default</li> </ul> <p>Each attribute is followed by a colon and by the data type of the variable. For methods, the return values follow.</p> <pre><code>classDiagram\n    class Person {\n        -name: String\n        -age: int\n        +Person(name: String, age: int)\n        +getName(): String\n        +setName(name: String): void\n        +getAge(): int\n        +setAge(age: int): void\n    }</code></pre> <p>In this example, the <code>Person</code> class has two <code>private</code> attributes (<code>name</code> and <code>age</code>), a <code>public</code> constructor and four <code>public</code> methods (<code>getName</code>, <code>setName</code>, <code>getAge</code>, <code>setAge</code>).</p>"},{"location":"SLHL/04/#relationships","title":"Relationships","text":"<p>Attention</p> <p>The diamond for aggregation is always pointed towards the container, not the contained. (i.e. instead of a \u201chave-a\u201d relationship, it is a \u201cbeing-had-by\u201d relationship).</p> <pre><code>classDiagram\n    class Student {\n        -studentID: int\n        +getStudentID(): int\n    }\n    class Teacher {\n        -teacherID: int\n        +getTeacherID(): int\n    }\n    class CompSciStudent {\n        -teacher: String\n        +getTeacherCode(): String\n    }\n    class School {\n        -students: Student[]\n        +getStudents(): Student[]\n    }\n    class ExamScores {\n        -scores: int[]\n        +getScore(Student stu): int\n    }\n\n    Student &lt;-- Teacher : teaches (Association)\n    Student &lt;|-- CompSciStudent : is a (Inheritance)\n    School o-- Student : contained in (Aggregation)\n    Student &lt;.. ExamScores : referenced by (Dependency)</code></pre>"},{"location":"SLHL/04/#multiple-classes-sub-classes","title":"Multiple Classes &amp; Sub-Classes","text":"<p>Syllabus points</p> <ul> <li>D.2.1 Define the term encapsulation</li> <li>D.2.2 Define the term inheritance</li> <li>D.2.3 Define the term polymorphism</li> <li>D.2.4 Explain the advantages of encapsulation</li> <li>D.2.5 Explain the advantages of inheritance</li> <li>D.2.6 Explain the advantages of polymorphism</li> </ul>"},{"location":"SLHL/04/#access-modifiers","title":"Access modifiers","text":"Access level <code>public</code> <code>protected</code> default <code>private</code> Same package yes yes yes no Different package yes subclasses only no no"},{"location":"SLHL/04/#public","title":"<code>public</code>","text":"<ul> <li>Can be accessed from everywhere</li> <li>In Java, a source file can only have one <code>public</code> class with the same name as the file</li> </ul>"},{"location":"SLHL/04/#protected","title":"<code>protected</code>","text":"<ul> <li>Can be accessed from:<ul> <li>Within the same class</li> <li>Everywhere from the same package</li> <li>Subclasses everywhere (regardless of which package)</li> </ul> </li> <li>Cannot be used with top-level classes (only when nested)</li> </ul>"},{"location":"SLHL/04/#default-no-specifier","title":"default (no specifier)","text":"<ul> <li>Can be accessed from:<ul> <li>Within the same class</li> <li>Everywhere from the same package</li> </ul> </li> <li>Convenient for package-private classes</li> </ul>"},{"location":"SLHL/04/#private","title":"<code>private</code>","text":"<ul> <li>Can be accessed from within the same class only</li> <li>Not visible to or inheritable by subclasses</li> <li>Mostly used for encapsulation</li> </ul>"},{"location":"SLHL/04/#visibility-in-inheritance","title":"Visibility in inheritance","text":"<ul> <li><code>public</code> variables in a superclass must be <code>public</code> in subclasses.</li> <li><code>protected</code> variables in a superclass must either be <code>protected</code> or <code>public</code> in subclasses; they cannot be <code>private</code>.</li> <li><code>private</code> variables are never inherited.</li> </ul>"},{"location":"SLHL/04/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation (data hiding) is the technique of making variables in a class private and providing access to the fields via public methods.</p> <p>Encapsulation acts as a protective barrier that prevents the code and data from being randomly accessed by other code defined outside the class. Access to the data and code is tightly controlled by an interface.</p> <p>Advantages of encapsulation:</p> <ul> <li>Improves maintainability, flexibility and re-usability: implementation is purely hidden from outside classes, thus can be changed without affecting dependent code</li> <li>Ability to create a read-only or write-only field (by not providing a getter or setter)</li> <li>A class can have total control over what is stored in its fields (ability to e.g. validate)</li> </ul> <p>Steps to encapsulate a class:</p> <ol> <li>Make the fields <code>private</code></li> <li>Create accessors and mutators (getters and setters) for the fields</li> </ol> <pre><code>public class Person {\n    // Instead of having `public` attributes, we use `private`...\n    private String name;\n\n    // ...and use public accessors/mutators\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"SLHL/04/#getters-and-setters","title":"Getters and setters","text":"<p>A getter method returns the value of an attribute. A setter method takes a parameter and assigns it to the attribute.</p> <p>They control how important variables are accessed and updated. For example:</p> <pre><code>public void setNumber(int number) {\n    if (number &lt; 1 || number &gt; 10) {\n        System.out.println(\"Number not in correct range\");\n        return;\n    }\n    this.number = num;\n}\n</code></pre> <p>This setter can be used to validate the value of the variable to be within a range before it is assigned.</p>"},{"location":"SLHL/04/#inheritance","title":"Inheritance","text":"<p>Inheritance is a mechanism in which one class acquires the properties (methods and fields) of another (extends).</p> <p>To extend a class is to define additional attributes and methods other than the inherited ones.</p> <p>Inheritance defines an is-a relationship.</p> <pre><code>public class Animal {\n    public void eat() {\n        System.out.println(\"Animal is eating\");\n    }\n}\n\npublic class Dog extends Animal {\n    public void bark() {\n        System.out.println(\"Dog is barking\");\n    }\n}\n\nDog d = new Dog();\nd.eat();\nd.bark();\n</code></pre>"},{"location":"SLHL/04/#super-keyword","title":"<code>super</code> keyword","text":"<p>The <code>super</code> keyword is similar to <code>this</code> but refers to the superclass. It can be used to access the superclass variables and call the superclass constructor.</p> <pre><code>public class Animal {\n    protected String name;\n\n    public Animal() {\n        System.out.println(\"Animal constructor\");\n    }\n\n    public void eat() {\n        System.out.println(\"Animal is eating\");\n    }\n}\n\npublic class Dog extends Animal {\n    public Dog(String name) {\n        // Calling the superclass constructor\n        super();\n        // Using super to modify a superclass attribute\n        super.name = name;\n        System.out.println(\"Dog constructor (\" + name + \")\");\n    }\n\n    public void eat() {\n        // Using super to call a superclass method\n        super.eat();\n        System.out.println(\"Dog is eating\");\n    }\n}\n\nDog d = new Dog(\"Fido\");\nd.eat();\n// Output:\n// Animal constructor\n// Dog constructor (Fido)\n// Animal is eating\n// Dog is eating\n</code></pre>"},{"location":"SLHL/04/#limitations-of-java-inheritance","title":"Limitations of Java inheritance","text":"<ul> <li>Private members of the superclass are not inherited by the subclass and can only be indirectly accessed.</li> <li>Members that have default accessibility in the superclass are also not inherited by subclasses in other packages, as these members are only accessible by their names in subclasses within the same package as the superclass.</li> <li>Since constructors and initializer blocks are not members of a class, they are not inherited by a subclass.</li> <li>A subclass can extend only one superclass.</li> </ul>"},{"location":"SLHL/04/#types-of-inheritance","title":"Types of inheritance","text":"<ul> <li> <p>Single inheritance</p> <pre><code>classDiagram\n    class Animal {\n        +eat()\n    }\n    class Dog {\n        +bark()\n    }\n    Animal &lt;|-- Dog</code></pre> <pre><code>public class Animal {\n    public void eat() {\n        System.out.println(\"Animal is eating\");\n    }\n}\n\npublic class Dog extends Animal {\n    public void bark() {\n        System.out.println(\"Dog is barking\");\n    }\n}\n</code></pre> </li> <li> <p>Multi-level inheritance</p> <pre><code>classDiagram\n    class Animal {\n        +eat()\n    }\n    class Dog {\n        +bark()\n    }\n    class BabyDog {\n        +weep()\n    }\n    Animal &lt;|-- Dog\n    Dog &lt;|-- BabyDog</code></pre> <pre><code>public class Animal {\n    public void eat() {\n        System.out.println(\"Animal is eating\");\n    }\n}\n\npublic class Dog extends Animal {\n    public void bark() {\n        System.out.println(\"Dog is barking\");\n    }\n}\n\npublic class BabyDog extends Dog {\n    public void weep() {\n        System.out.println(\"Baby dog is weeping\");\n    }\n}\n</code></pre> </li> <li> <p>Hierarchical inheritance</p> <pre><code>classDiagram\n    class Animal {\n        +eat()\n    }\n    class Dog {\n        +bark()\n    }\n    class Cat {\n        +meow()\n    }\n    Animal &lt;|-- Dog\n    Animal &lt;|-- Cat</code></pre> <pre><code>public class Animal {\n    public void eat() {\n        System.out.println(\"Animal is eating\");\n    }\n}\n\npublic class Dog extends Animal {\n    public void bark() {\n        System.out.println(\"Dog is barking\");\n    }\n}\n\npublic class Cat extends Animal {\n    public void meow() {\n        System.out.println(\"Cat is meowing\");\n    }\n}\n</code></pre> </li> <li> <p>Advantages</p> <ul> <li>Code reuse: child classes use the code in the parent class without re-writing, which saves time and effort</li> <li>Clear model structure: easy to understand</li> <li>Overriding parents: meaningful implementation can be designed in the subclass, less development and maintenance costs</li> <li>Base classes can still decide to keep some data private to prevent alteration by the derived class</li> </ul> </li> <li>Disadvantages<ul> <li>Decreases execution speed: program jumps through levels of overloaded classes</li> <li>Makes the parents and children tightly coupled: cannot be used independently of each other</li> <li>Changes made in the parent class will affect child classes</li> <li>Overusing inheritance makes the program more complex</li> </ul> </li> </ul>"},{"location":"SLHL/04/#polymorphism","title":"Polymorphism","text":"<p>Polymorphism allows us to perform a single action in different ways. A method can do different things based on the object that it is acting upon. In other words, polymorphism allows you to define one interface and have multiple implementations.</p> <p>Advantages:</p> <ul> <li>Overriding<ul> <li>Allows a general class to specify methods that will be common to all of its derivatives while allowing subclasses to define the specific implementation of some or all of those methods</li> <li>Allows to call methods of any derived class without knowing the type of derived class object</li> </ul> </li> <li>Overloading<ul> <li>No need to create and remember different names for functions with similar functionality</li> </ul> </li> </ul>"},{"location":"SLHL/04/#overloading","title":"Overloading","text":"<p>Method overloading is a feature that allows a class to have more than one method with the same name but different argument lists, return types, access modifiers and/or exceptions. Methods inherited from a superclass can also be overloaded in a subclass.</p> <p>Conditions for overloaded methods:</p> <ol> <li>Within the same class definition</li> <li>Same method name</li> <li>Different parameters/signature</li> </ol> <p>To call an overloaded method, you must specify the type and number of arguments. The Java compiler will then select the most appropriate method to call based on the arguments. This is called compile-time (static binding) polymorphism.</p> <pre><code>public class Adder {\n    static int add(int a, int b) {\n        return a + b;\n    }\n    static double add(double a, double b) {\n        // add() is overloaded here with different arguments and return type\n        // (i.e. different method signature)\n        return a + b;\n    }\n}\n\nint sum1 = Adder.add(10, 20);\ndouble sum2 = Adder.add(10.5, 20.5);\n</code></pre>"},{"location":"SLHL/04/#overriding","title":"Overriding","text":"<p>Method overriding is a feature that allows a subclass to override a method in its parent class. Overridden methods must have the same method name as the method in the parent class, and the return type must be the same or a subclass of the original return type. The access modifier and exceptions of the overridden method can only be more restrictive than the parent class method.</p> <p>Static methods, final methods and constructors cannot be overridden.</p> <p>Conditions for overridden methods:</p> <ol> <li>Inherited from a parent class</li> <li>Redefined</li> <li>Same method name</li> </ol> <p>Attention</p> <p>If the argument list of a subclass method is different from the parent method, the method is overloaded, not overridden.</p> <p>The type of the object determines which version of the method will be called, as opposed to the type of the reference variable. This is called runtime (dynamic binding) polymorphism.</p> <pre><code>public class Animal {\n    public void eat() {\n        System.out.println(\"Animal is eating\");\n    }\n}\n\npublic class Dog extends Animal {\n    // The optional @Override annotation helps the compiler\n    // ensure that the method is actually overridden in case of\n    // e.g. typos in the method name\n    @Override\n    public void eat() {\n        // eat() is overridden here\n        // If the parent method needs to be called, we can use super.eat()\n        System.out.println(\"Dog is eating\");\n    }\n}\n</code></pre>"},{"location":"SLHL/05a/","title":"05a Searching &amp; Sorting Algorithms","text":"<p>Syllabus points</p> <ul> <li>4.2.1 Describe the characteristics of standard algorithms on linear arrays</li> <li>4.2.3 Discuss an algorithm to solve a specific problem</li> <li>4.2.4 Analyse an algorithm presented as a flow chart</li> <li>4.2.6 Construct pseudocode to represent an algorithm</li> <li>4.2.7 Suggest suitable algorithms to solve a specific problem</li> <li>4.2.8 Deduce the efficiency of an algorithm in the context of its use</li> <li>4.2.9 Determine the number of times a step in an algorithm will be performed for given input data</li> <li>4.3.12 Discuss the need for sub-programmes \u2026 within programmed solutions</li> <li>4.3.13 Construct algorithms using \u2026 one-dimensional arrays \u2026</li> </ul>"},{"location":"SLHL/05a/#searching-algorithms","title":"Searching algorithms","text":"<p>Principles of searching algorithms:</p> <ul> <li>Compare the search term with a particular element</li> <li>Return found or keep searching until nothing is left to search</li> </ul>"},{"location":"SLHL/05a/#linear-search","title":"Linear search","text":"<ul> <li>Pre-condition: none</li> <li>Post-condition: returns the index position found or -1</li> <li>Time complexity: \\(\\mathcal{O}(n)\\)</li> </ul> <p>Method:</p> <ul> <li>Start from the beginning of the array</li> <li>Compare the search term with the current element</li> <li>If the search term is found, return the index position</li> <li>Otherwise, move to the next element</li> <li>Keep going until the end of the array</li> <li>Return -1 if the search term is not found</li> </ul> <pre><code>SUB FUNCTION linearSearch(arr, tar)\n    FOR i &lt;- 0 TO arr.length - 1 DO\n        IF arr[i] = tar THEN\n            // Found\n            RETURN i\n        ENDIF\n    NEXT\n\n    // Not found\n    RETURN -1\nENDSUB\n</code></pre>"},{"location":"SLHL/05a/#binary-search","title":"Binary search","text":"<ul> <li>Pre-condition: array sorted</li> <li>Post-condition: returns the index position found or -1</li> <li>Time complexity: \\(\\mathcal{O}(\\log n)\\)</li> </ul> <p>Method:</p> <ul> <li>Use <code>low</code>, <code>high</code> and <code>mid</code> to keep track of the search range</li> <li>Start from the middle of the array (if even number of elements, round up)</li> <li>If the search term is found, return the index position</li> <li>Otherwise, discard the half of the array that the search term cannot be in by updating <code>low</code>, <code>high</code> and <code>mid</code></li> <li>Keep checking from <code>mid</code> until the search term is found or the search range is exhausted</li> <li>Return -1 if the search term is not found</li> </ul> <pre><code>SUB FUNCTION binarySearch(arr, tar)\n    low &lt;- 0\n    high &lt;- arr.length - 1\n\n    WHILE low &lt;= high DO\n        mid &lt;- (low + high) / 2\n\n        IF arr[mid] = tar THEN\n            // Found\n            RETURN mid\n        ELSE IF arr[mid] &lt; tar THEN\n            // Move to the right\n            low &lt;- mid + 1\n        ELSE\n            // Move to the left\n            high &lt;- mid - 1\n        ENDIF\n    ENDWHILE\n\n    // Not found\n    RETURN -1\nENDSUB\n</code></pre>"},{"location":"SLHL/05a/#sorting-algorithms","title":"Sorting algorithms","text":"<p>Principles of sorting algorithms:</p> <ul> <li>Compare one element in the array to another</li> <li>Decide whether a swap is needed</li> <li>Keep going until no more swapping is needed</li> </ul>"},{"location":"SLHL/05a/#bubble-sort","title":"Bubble sort","text":"<ul> <li>Time complexity: \\(\\mathcal{O}(n^2)\\)</li> </ul> <p>Method:</p> <ul> <li>Start from the beginning of the array</li> <li>Compare the current element with the next element</li> <li>If the current element is larger than the next element, swap them</li> <li>Otherwise, move to the next element</li> <li>Keep going until the end of the array</li> <li>Repeat the process until no more swapping is needed</li> </ul>"},{"location":"SLHL/05a/#optimisations","title":"Optimisations","text":"<ul> <li>Decreasing range: the last <code>r</code> elements are already sorted (where <code>r</code> is the number of passes)</li> <li>Early termination: if no swapping is needed in a pass, the array is sorted</li> </ul> <pre><code>/* Naive implementation */\nFOR i &lt;- 0 TO n - 1 DO\n    FOR j &lt;- 0 TO n - 2 DO\n        IF a[j] &gt; a[j + 1] THEN\n            // Swap\n            temp &lt;- a[j]\n            a[j] &lt;- a[j + 1]\n            a[j + 1] &lt;- temp\n        ENDIF\n    NEXT\nNEXT\n\n/* Optimised implementation */\nswapped &lt;- true\npass &lt;- 0\n\n// Early termination\nWHILE swapped DO\n    swapped &lt;- false\n\n    // Decreasing range (pass is the # of elements already sorted)\n    FOR i &lt;- 0 TO n - 2 - pass DO\n        IF a[i] &gt; a[i + 1] THEN\n            // Swap\n            temp &lt;- a[i]\n            a[i] &lt;- a[i + 1]\n            a[i + 1] &lt;- temp\n            swapped &lt;- true\n        ENDIF\n    NEXT\n\n    pass &lt;- pass + 1\nENDWHILE\n</code></pre>"},{"location":"SLHL/05a/#selection-sort","title":"Selection sort","text":"<ul> <li>Time complexity: \\(\\mathcal{O}(n^2)\\)</li> </ul> <p>Method:</p> <ul> <li>Start from the beginning of the array</li> <li>Find the smallest element in the array</li> <li>Swap the smallest element with the current element</li> <li>Move to the next element</li> <li>Keep going until the end of the array</li> </ul> <pre><code>FOR i &lt;- 0 TO n - 1 DO\n    mnmP &lt;- i\n\n    FOR j &lt;- i + 1 TO n - 1 DO\n        IF a[j] &lt; a[mnmP] THEN\n            // Update minimum position\n            mnmP &lt;- j\n        ENDIF\n    NEXT\n\n    // Swap\n    temp &lt;- a[i]\n    a[i] &lt;- a[mnmP]\n    a[mnmP] &lt;- temp\nNEXT\n</code></pre>"},{"location":"SLHL/05b/","title":"05b Collections vs Arrays","text":"<p>Syllabus points</p> <ul> <li>4.2.2 Outline the standard operations of collections</li> <li>4.2.6 Construct pseudocode to represent an algorithm</li> <li>4.2.7 Suggest suitable algorithms to solve a specific problem</li> <li>4.3.11 Construct algorithms using the access methods of a collection</li> <li>4.3.12 Discuss the need for sub-programmes and collections within programmed solutions</li> <li>4.3.13 Construct algorithms using \u2026 collections</li> </ul> <p>Collections store a set of elements of any type.</p> <pre><code>// STUFF is a collection that already exists\nSTUFF.resetNext()\n    loop while STUFF.hasNext()\n    ITEM = STUFF.getNext()\n    // process ITEM in whatever way is needed\nend loop\n</code></pre> Method name Brief description Example: <code>HOT</code>, a collection of temperatures Comment <code>addItem()</code> Add item <code>HOT.addItem(42)</code><code>HOT.addItem(\"chile\")</code> Adds an element that contains the argument, whether it is a value, String, object, etc. <code>getNext()</code> Get the next item <code>TEMP = HOT.getNext()</code> <code>getNext()</code> will return the first item in the collection when it is first called. Note: <code>getNext()</code> does not remove the item from the collection. <code>resetNext()</code> Go back to the start of the collection <code>HOT.resetNext()</code><code>HOT.getNext()</code> Restarts the iteration through the collection. The two lines shown will retrieve the first item in the collection. <code>hasNext()</code> Test: has next item <code>if HOT.hasNext() then</code> Returns <code>TRUE</code> if there are one or more elements in the collection that have not been accessed by the present iteration: The next use of <code>getNext()</code> will return a valid element. <code>isEmpty()</code> Test: collection is empty <code>if HOT.isEmpty() then</code> Returns <code>TRUE</code> if the collection does not contain any elements."},{"location":"SLHL/06/","title":"06 Computer Organisation","text":""},{"location":"SLHL/06/#binary-representation","title":"Binary Representation","text":"<p>Syllabus points</p> <ul> <li>2.1.9 Define the terms: bit, byte, binary, denary/decimal, hexadecimal</li> <li>2.1.10 Outline the way in which data is represented in the computer</li> </ul> <p>See SL03c.</p>"},{"location":"SLHL/06/#simple-logic-gates","title":"Simple Logic Gates","text":"<p>Syllabus points</p> <ul> <li>2.1.11 Define the Boolean operators: AND, OR, NOT, NAND, NOR and XOR</li> <li>2.1.12 Construct truth tables using the above operators</li> <li>2.1.13 Construct a logic diagram using AND, OR, NOT, NAND, NOR and XOR gates</li> </ul> <p>See SL02a.</p>"},{"location":"SLHL/06/#computer-architecture","title":"Computer Architecture","text":"<p>Syllabus points</p> <ul> <li>2.1.1 Outline the architecture of the central processing unit (CPU) and the functions of the arithmetic logic unit (ALU) and the control unit (CU) and the registers within the CPU</li> <li>2.1.2 Describe primary memory</li> <li>2.1.3 Explain the use of cache memory</li> <li>2.1.4 Explain the machine instruction cycle</li> </ul>"},{"location":"SLHL/06/#cpu-architecture","title":"CPU architecture","text":"<ul> <li>CPU: contains the circuitry necessary to fetch, decode and execute program instructions from and to main memory (RAM)</li> <li>ALU: part of the CPU that does all the arithmetic (+/-) and logical (AND/OR) calculations; sometimes referred to as a \u201ccore\u201d (e.g. dual core = 2 ALUs to process 2 calculations simultaneously)</li> <li>CU: handles the loading of new commands into the CPU and the decoding of these commands; directs the data flow and the operation of the ALU</li> <li>Register (CPU\u2019s own \u201cmemory\u201d): small, very fast circuits that store intermediate values from calculations or instructions inside the CPU<ul> <li>MAR: connected to the address bus, contains the memory address of the next instruction to be fetched</li> <li>MDR: connected to the data bus, holds data that will be written to or was read from RAM</li> <li>Accumulator (out of syllabus)</li> </ul> </li> <li>Bus: a wire that connects the CPU to other devices, normally built into the motherboard<ul> <li>Data bus (links RAM to CPU via MDR) - bidirectional</li> <li>Control bus (links RAM to CPU via CU) - unidirectional</li> <li>Address bus (links RAM to CPU via MAR) - unidirectional</li> </ul> </li> </ul>"},{"location":"SLHL/06/#primary-memory","title":"Primary memory","text":"<p>See also</p> <p>HL04 Resource Management \u00a7 Resources to manage</p> <pre><code>graph TD\nMemory --&gt; Primary &amp; Secondary\nPrimary --&gt; RAM &amp; ROM &amp; Cache\nSecondary --&gt; Magnetic &amp; Optical &amp; Electronic</code></pre> <ul> <li>RAM (Random Access Memory/primary memory)<ul> <li>Contains the data and instructions the computer has loaded since starting up and everything the user has opened/loaded</li> <li>Volatile (loses its contents if power is lost)</li> <li>Has a special link to the CPU (via busses)</li> </ul> </li> <li>ROM (Read Only Memory)<ul> <li>Usually static (read-only) except flash upgrades</li> <li>Non-volatile (does not lose its contents if power is lost)</li> <li>Stores the BIOS (Basic Input Output System): a small program that allows the computer to find the operating system to \u201cboot\u201d the computer after power is restored</li> </ul> </li> </ul> RAM ROM Volatile Non-volatile Contains programs and data loaded since \u201cbooting up\u201d Contains the BIOS Usually upgradeable, can be increased Usually part of motherboard, difficult to upgrade"},{"location":"SLHL/06/#cache-memory","title":"Cache memory","text":"<p>A type of small, high-speed memory inside the CPU used to hold frequently used data, so that the CPU needs to access the much slower RAM less frequently.</p> <p></p>"},{"location":"SLHL/06/#the-machine-instruction-cycle","title":"The machine instruction cycle","text":"<ul> <li>\u201cFetch-decode-execute\u201d cycle (FDE/machine cycle)</li> <li>Fetches the instruction from memory, decodes and executes</li> <li>Repeat from startup to shutdown</li> </ul> <p>Procedure:</p> <ol> <li>PC contains the address of the next instruction to be fetched</li> <li>Address in PC copied to MAR via address bus (MAR points to an address)</li> <li>Instruction copied from the memory location in MAR and placed in MDR via data bus</li> <li>Instruction copied from MDR and placed in CIR via data bus</li> <li>Address part of instruction placed in MAR</li> <li>PC increments</li> <li>Instruction decoded in CU</li> <li>Instruction executed in ALU</li> </ol> <p></p>"},{"location":"SLHL/06/#secondary-memory","title":"Secondary Memory","text":"<p>Syllabus points</p> <ul> <li>2.1.5 Identify the need for persistent storage</li> </ul> <p>We need secondary storage because:</p> <ul> <li>CPU has no permanent storage (only registers for temporary processing)</li> <li>RAM is volatile (loses contents if power is lost)</li> <li>Results/data need to be stored on a persistent storage</li> </ul> <pre><code>graph TD\nroot[Types of storage] --&gt; Primary &amp; Secondary &amp; Offline\nPrimary --&gt; cache[\"Cache (in CPU)\"] &amp; RAM\nSecondary --&gt; hdd[Hard drive] &amp; SSD\nOffline --&gt; flash[\"Flash drive&lt;br /&gt;(USB thumb drive)\"] &amp; optical[\"Optical&lt;br /&gt;(CD, DVD)\"] &amp; tape[Tape drive]</code></pre>"},{"location":"SLHL/06/#operating-systems-application-systems","title":"Operating Systems &amp; Application Systems","text":"<p>Syllabus points</p> <ul> <li>2.1.6 Describe the main functions of an operating system</li> <li>2.1.7 Outline the use of a range of application software</li> <li>2.1.8 Identify common features of applications, which include:<ul> <li>toolbars,</li> <li>menus,</li> <li>dialogue boxes,</li> <li>graphical user interface (GUI) components.</li> </ul> </li> </ul> <p>See SL03b.</p>"},{"location":"SLHL/07a/","title":"07a Systems in Organisations","text":""},{"location":"SLHL/07a/#planning-and-system-installation","title":"Planning and System Installation","text":""},{"location":"SLHL/07a/#system-planning-and-change-management","title":"System planning and change management","text":"<p>Syllabus points</p> <ul> <li>1.1.1 Identify the context for which a new system is planned</li> <li>1.1.2 Describe the need for change management</li> </ul> <ul> <li>The context of a system is important in its planning (background, environment, framework, setting, or situation surrounding a system)<ul> <li>Considerations for context: extent and limitations of the new system</li> <li>What existing infrastructure from the existing system can be used?</li> <li>What requirements on hardware and software will the new system have?</li> <li>Are there any ethical issues resulting (e.g. will the new system make people unnecessary, leading to loss of jobs)?</li> </ul> </li> <li>Changing a system can be difficult<ul> <li>Users don\u2019t like change (too often/at all)</li> <li>New systems might omit old features</li> <li>Old systems might be faster in certain circumstances</li> <li>People find change complex</li> <li>From a technology perspective, change might lead to incompatibility</li> <li>There might be data loss during migration</li> <li>It might be expensive (either in terms of money or time)</li> </ul> </li> <li>Change must be managed<ul> <li>Plan: a clear and valid reason and mission for the change process</li> <li>Communicate: communicate the change, and its many factors, to key stakeholders within the organisation</li> <li>Integrate: open up plans for consultation with your stakeholder group</li> <li>Evaluate: monitor the reactions of the wider organisation to that change program</li> </ul> </li> </ul>"},{"location":"SLHL/07a/#legacy-systems-and-mergers","title":"Legacy systems and mergers","text":"<p>Syllabus points</p> <ul> <li>1.1.3 Outline compatibility issues resulting from situations including legacy systems or business mergers</li> </ul> <ul> <li>Legacy system: an old method, technology, computer system, or application program, that may or may not be supported/available for purchase anymore<ul> <li>Reasons to keep a legacy system<ul> <li>To prevent the cost of data migration</li> <li>To prevent the purchase of new hardware/software to run the new system</li> <li>To keep a compatible file format</li> <li>To prevent down time because of the migration</li> </ul> </li> <li>Disadvantages<ul> <li>Maintenance costs: expensive to maintain</li> <li>Security issues: old systems might not be patched anymore</li> <li>Unavailability of support from the vendor</li> <li>May fail/crash more often</li> </ul> </li> </ul> </li> <li>Merger: a combination of two entities or more, especially companies, into one<ul> <li>Strategies<ul> <li>Keeping both systems and developing the same functionalities (costly)</li> <li>Replacing both systems with a new system (higher initial cost and training)</li> <li>Keeping the best system and migrating the data from the other system (employees need to be retrained)</li> <li>Keeping only one system and dropping the others (restricted by organisation policies)</li> </ul> </li> <li>Issues with mergers<ul> <li>Issues of software compatibility</li> <li>Language differences</li> <li>Time zone differences</li> <li>Workforce cultural differences</li> </ul> </li> </ul> </li> </ul>"},{"location":"SLHL/07a/#saas","title":"SaaS","text":"<p>Syllabus points</p> <ul> <li>1.1.4 Compare the implementation of systems using a client\u2019s hardware with hosting systems remotely</li> </ul> <ul> <li>Locally-hosted system: software installed on the client\u2019s infrastructure</li> <li>Remotely-hosted system: software hosted on dedicated servers by a third-party provider</li> <li>Software-as-a-Service (SaaS)<ul> <li>A third-party provider hosts applications and makes them available to customers over the Internet</li> <li>No traditional software installation, maintenance, or management approaches</li> <li>Service provider partners shoulder the burdens of security, availability, and performance</li> <li>e.g. Microsoft Office 365, Google Workspace, Amazon Web Services, Dropbox</li> <li>Benefits<ul> <li>Minimize IT responsibilities and costs</li> <li>Well suited for small businesses: instead of investing in additional in-house server capacity and software licenses, companies simply can adjust their SaaS subscription monthly</li> <li>Reduction in staff workload: in-house IT workers liberated from tasks associated with on-premise hardware and software</li> <li>Better disaster recovery: infrastructure managed by SaaS provider</li> </ul> </li> <li>Drawbacks<ul> <li>Multiple SaaS applications may lead to integration issues</li> <li>Security: sensitive data stored on third-party servers</li> <li>Government compliance regulations: storing customer data in a remote region</li> </ul> </li> </ul> </li> </ul>"},{"location":"SLHL/07a/#installation-strategies","title":"Installation strategies","text":"<p>Syllabus points</p> <ul> <li>1.1.5 Evaluate alternative installation processes</li> </ul> <ul> <li>Direct changeover: stop the old system and start the new system<ul> <li>Minimal time and effort: the new system is available immediately</li> <li>No fallback</li> </ul> </li> <li>Parallel running: start the new system but keep the old system running<ul> <li>The old system runs a backup in case the new system fails (no loss of productivity); outputs from the two systems can be compared to see if the new one is running correctly</li> <li>Data has to be entered twice; costly in terms of time and money</li> </ul> </li> <li>Pilot running: the new system is piloted (tested) with a small subset of the organisation, then rolled out to the rest<ul> <li>All features are fully trialed; if the new system fails, only a small part of the organisation suffers; staff who were part of the pilot can train other staff</li> <li>No fallback for the pilot group</li> </ul> </li> <li>Phased conversion: introduced in phases (gradually replaced with the new system)<ul> <li>Allows people to get used to the new system; training of staff can be done in stages</li> <li>No fallback if a phase fails</li> </ul> </li> </ul>"},{"location":"SLHL/07a/#data-migration","title":"Data migration","text":"<p>Syllabus points</p> <ul> <li>1.1.6 Discuss problems that may arise as a part of data migration</li> </ul> <ul> <li>Data migration = moving data (e.g. copying data onto a USB drive, moving database from one server to another)</li> <li>Problems with data migration<ul> <li>Incompatible file formats: the data created in one version of the program might not be compatible with another version</li> <li>Data structure differences: e.g. moving data from a table to a flat file, or from an array to a linked list</li> <li>Validation rules: data will be rejected if the validation rules are different</li> <li>Incomplete data transfers: if the transfer is interrupted, the data might be corrupted</li> <li>International conventions on dates, currencies, and character sets: e.g. DD/MM/YYYY vs MM/DD/YYYY, \u00a3 vs $, ASCII vs Unicode</li> </ul> </li> </ul>"},{"location":"SLHL/07a/#testing","title":"Testing","text":"<p>Syllabus points</p> <ul> <li>1.1.7 Suggest various types of testing</li> </ul> <p>See SL02b.</p>"},{"location":"SLHL/07a/#user-focus","title":"User Focus","text":"<p>Syllabus points</p> <ul> <li>1.1.8 Describe the importance of user documentation</li> <li>1.1.9 Evaluate different methods of providing user documentation</li> <li>1.1.10 Evaluate different methods of delivering user training</li> </ul> <p>See SL03a.</p>"},{"location":"SLHL/07a/#system-backup","title":"System Backup","text":"<p>Syllabus points</p> <ul> <li>1.1.11 Identify a range of causes of data loss</li> <li>1.1.12 Outline the consequences of data loss in a specified situation</li> <li>1.1.13 Describe a range of methods that can be used to prevent data loss</li> </ul> <ul> <li>Causes of data loss<ul> <li>Hardware/system malfunctions</li> <li>Human error (e.g. accidental deletion, overwriting, formatting the drive, dropping the device physically)</li> <li>Software corruption</li> <li>Malicious software (e.g. viruses, ransomware)</li> <li>Internal breaches (e.g. disgruntled employees)</li> </ul> </li> <li>Aspects to consider for consequences of data loss<ul> <li>Can the data be replaced?</li> <li>How easy is the data to replace?</li> <li>Who will be affected by the data loss?</li> <li>Are there financial implications to the data loss?</li> <li>Are the \u201clife-and-death\u201d consequences of the loss?</li> <li>Who is responsible for data recovery?</li> </ul> </li> <li>Methods to prevent data loss<ul> <li>Failover system: the constant capability to automatically and seamlessly switch to a highly reliable backup system</li> <li>Redundancy: the same piece of data is held in two separate places</li> <li>Removable media (e.g. CD, DVD, USB drive)</li> <li>Offsite/online storage: data is stored in a different location external to the core system (for cloud storage: done remotely over the Internet)</li> </ul> </li> </ul>"},{"location":"SLHL/07a/#software-deployment","title":"Software Deployment","text":"<p>Syllabus points</p> <ul> <li>1.1.14 Describe strategies for managing releases and updates</li> </ul> <ul> <li>Release: launching a new product for a specific market or user base</li> <li>Update: a software file that contains fixes for problems</li> <li>Patch: a software update inserted (patched) into an executable program (often temporary fixes between full releases)</li> <li>Ways to get updates<ul> <li>Manually: downloaded and installed by the user<ul> <li>Full control over when to update, but time-consuming</li> </ul> </li> <li>Automatically: software automatically contacts the developer to download and install any updates<ul> <li>Always up-to-date, but a bad update might crash the system</li> </ul> </li> </ul> </li> <li>Release management strategies<ul> <li>Continuous delivery: teams produce software in short cycles<ul> <li>Building, testing, and releasing software with greater speed and frequency</li> <li>Reduces the cost, time, and risk of delivering changes by allowing for more incremental updates to applications in production</li> </ul> </li> <li>Agile software development: requirements and solutions evolve through the collaborative effort of self-organizing and cross-functional teams and their customers/end users<ul> <li>Advocates adaptive planning, evolutionary development, early delivery, and continual improvement</li> <li>Encourages rapid and flexible response to change</li> </ul> </li> <li>DevOps: unifying software development (Dev) and software operation (Ops)<ul> <li>Advocates automation and monitoring at all steps of software construction</li> </ul> </li> </ul> </li> </ul>"},{"location":"SLHL/07b/","title":"07b System Design Basics","text":""},{"location":"SLHL/07b/#components-of-a-computer-system","title":"Components of a Computer System","text":"<p>Syllabus points</p> <ul> <li>1.2.1 Define the terms: hardware, software, peripheral, network, human resources</li> <li>1.2.2 Describe the roles that a computer can take in a networked world<ul> <li>Roles include client, server, email server, DNS server, router and firewall</li> </ul> </li> <li>1.2.3 Discuss the social and ethical issues associated with a networked world</li> </ul>"},{"location":"SLHL/07b/#5-components-of-a-computer-system","title":"5 components of a computer system","text":"<ol> <li>Hardware: physical parts of a computer and related devices<ul> <li>Internal hardware devices (components): motherboard, hard drive, RAM</li> <li>External hardware devices (peripherals): monitor, keyboard, mouse, printer, scanner</li> </ul> </li> <li>Peripherals (I/O devices): any external device that provides input and output for the computer<ul> <li>Input peripherals: keyboard, mouse</li> <li>Output peripherals: monitor, printer</li> </ul> </li> <li>Network: multiple devices that communicate with one another using a transmission medium (see Topic 3)</li> <li>Software: computer programs or sets of instructions<ul> <li>Virtual, not physical</li> <li>Consists of lines of code</li> <li>Stored as binary</li> </ul> </li> <li>Human resources: people who work for an organisation and the department responsible for managing resources related to employees (end users)</li> </ol>"},{"location":"SLHL/07b/#roles-of-a-computer","title":"Roles of a computer","text":"<ul> <li>Client: requests data from a server</li> <li>Server: provides data to a client<ul> <li>On a local area network (LAN) or wide area network (WAN)</li> <li>Includes types that run specific software to its purpose (e.g. web servers, email servers, DNS servers, file servers, print servers)</li> </ul> </li> <li>Client-server model: a centralised system where clients request data from a server (one-to-many relationship with clients)<ul> <li>The server can accept/reject a connection request</li> <li>If the connection is accepted, the establishes and maintains a connection with the client over a protocol</li> </ul> </li> </ul> <ul> <li>Router: a hardware device that routes data from a local area network (LAN) to another network (e.g. the Internet)<ul> <li>Can be a separate device or software on a server</li> </ul> </li> <li>Domain Name System (DNS) server: translates domain names (e.g. <code>google.com</code>) to IP addresses (e.g. <code>64.233.160.0</code>), which are used to access Internet resources</li> </ul> <ul> <li>Firewall: a barrier between a trusted system and outside connections by filtering incoming and outgoing network traffic based on a blocklist or allowlist<ul> <li>Can be hardware or software</li> </ul> </li> </ul>"},{"location":"SLHL/07b/#system-design-analysis","title":"System Design &amp; Analysis","text":"<p>Syllabus points</p> <ul> <li>1.2.4 Identify the relevant stakeholders when planning a new system</li> <li>1.2.5 Describe methods of obtaining requirements from stakeholders</li> <li>1.2.6 Describe appropriate techniques for gathering the information needed to arrive at a workable solution</li> <li>1.2.7 Construct suitable representations to illustrate system requirements</li> <li>1.2.8 Describe the purpose of prototypes to demonstrate the proposed system to the client</li> <li>1.2.9 Discuss the importance of iteration during the design process</li> </ul> <p>See SL02b.</p> <p>Syllabus points</p> <ul> <li>1.2.10 Explain the possible consequences of failing to involve the end-user in the design process</li> <li>1.2.11 Discuss the social and ethical issues associated with the introduction of new IT systems</li> </ul> <p>See SL02b.</p> <p>Social and ethical issues with new systems:</p> <ul> <li>Robots/AI replacing humans</li> <li>Addictive/frustrating/less efficient</li> <li>Prompting new markets</li> <li>Changing work patterns</li> <li>Software changes drive hardware changes and vice versa</li> </ul>"},{"location":"SLHL/07b/#human-interaction-with-the-system","title":"Human Interaction with the System","text":"<p>Syllabus points</p> <ul> <li>1.2.12 Define the term usability</li> <li>1.2.13 Identify a range of usability problems with commonly used digital devices</li> <li>1.2.14 Identify methods that can be used to improve the accessibility of systems</li> <li>1.2.15 Identify a range of usability problems that can occur in a system</li> <li>1.2.16 Discuss the moral, ethical, social, economic and environmental implications of the interaction between humans and machines</li> </ul>"},{"location":"SLHL/07b/#usability","title":"Usability","text":"<p>See SL02b.</p>"},{"location":"SLHL/07b/#usability-problems","title":"Usability problems","text":"<ul> <li>Difficult to handle/fiddly hardware</li> <li>Difficult to understand software</li> <li>Complex user interface</li> <li>Need to have lots of prior knowledge</li> <li>Specialist support needed to use the device</li> <li>Each device is different from other similar devices (no standards)</li> </ul> <p>Questions to consider:</p> <ul> <li>What would happen if someone can\u2019t access the system?</li> <li>What would happen if they could only access certain parts?</li> <li>What happens if they misunderstand what the system requires as input?</li> <li>What would happen if they can\u2019t access the output?</li> </ul>"},{"location":"SLHL/07b/#accessibility","title":"Accessibility","text":"<p>See also</p> <p>SL02b Problem-Solving &amp; Java (Project) \u00a7 Accessibility</p> <ul> <li>Types of disabilities<ul> <li>Visual</li> <li>Auditory</li> <li>Mobility/dexterity</li> <li>Cognitive</li> </ul> </li> <li>Ways to improve accessibility<ul> <li>Touch screens</li> <li>Voice recognition</li> <li>Text-to-speech</li> <li>Braille keyboard</li> </ul> </li> </ul>"},{"location":"SLHL/08/","title":"08 Networks","text":"<ul> <li>08.1 Network Fundamentals</li> <li>08.2 Data Transmission</li> <li>08.3 Wireless Networking</li> </ul>"},{"location":"SLHL/08/1/","title":"08.1 Network Fundamentals","text":""},{"location":"SLHL/08/1/#types-of-networks","title":"Types of networks","text":"<p>Syllabus points</p> <ul> <li>3.1.1 Identify different types of networks</li> </ul> <p>Network: a group of computer systems and other computing hardware devices that are linked together through communication channels to facilitate communication and resource-sharing among a range of users.</p>"},{"location":"SLHL/08/1/#local-area-network-lan","title":"Local Area Network (LAN)","text":"<ul> <li>Covers a small geographical area (e.g. a single building)</li> <li>Mostly based on Ethernet technology</li> </ul>"},{"location":"SLHL/08/1/#virtual-local-area-network-vlan","title":"Virtual Local Area Network (VLAN)","text":"<ul> <li>A logical group of workstations, servers and network devices that appear to be on the same LAN despite their geographical distribution (as opposed to a physical LAN)</li> <li>Allows a network of computers and users to communicate in a simulated environment as if they exist in a single LAN</li> <li>e.g. separating a network into different departments/access levels, multi-player games in a gaming cafe</li> </ul>"},{"location":"SLHL/08/1/#wireless-local-area-network-wlan","title":"Wireless Local Area Network (WLAN)","text":"<ul> <li>A wireless distribution method for two or more devices that use high-frequency radio waves and often include an access point to the Internet</li> <li>Allows users to move around the coverage area while maintaining a network connection</li> </ul>"},{"location":"SLHL/08/1/#wide-area-network-wan","title":"Wide Area Network (WAN)","text":"<ul> <li>More than one LAN connected across wider geographic locations (e.g. different buildings in a city)</li> </ul>"},{"location":"SLHL/08/1/#storage-area-network-san","title":"Storage Area Network (SAN)","text":"<ul> <li>A dedicated high-speed network that provides access to block-level storage</li> <li>Makes a network of storage devices accessible to multiple servers (appear to servers as attached drives)</li> </ul>"},{"location":"SLHL/08/1/#internet","title":"Internet","text":"<ul> <li>A globally connected network system that uses the TCP/IP protocol to transmit data via various types of media</li> <li>A network of global exchanges connected by wired, wireless and fibre-optic technologies</li> </ul>"},{"location":"SLHL/08/1/#intranet-and-extranet","title":"Intranet and extranet","text":"<ul> <li>Intranet: a local/restricted/private network that provides an internal network for an organisation (e.g. an employee announcement board)</li> <li>Extranet: an Intranet that can be partially accessed by authorised users outside the organisation (e.g. suppliers, vendors, partners, customers)</li> </ul>"},{"location":"SLHL/08/1/#virtual-private-network-vpn","title":"Virtual Private Network (VPN)","text":"<ul> <li>A group of computers connected through encrypted lines, either within another LAN or around the world, using the Internet</li> <li>Allows people to log into a network remotely and access its resources, but encrypts the connection to prevent eavesdropping</li> </ul>"},{"location":"SLHL/08/1/#personal-area-network-pan","title":"Personal Area Network (PAN)","text":"<ul> <li>A computer network used for data transmission among devices such as computers, telephones and personal digital assistants (PDAs) that are close to one person (very small area)</li> <li>Can be created using e.g. Bluetooth, infrared, USB</li> </ul>"},{"location":"SLHL/08/1/#peer-to-peer-p2p","title":"Peer-to-peer (P2P)","text":"<ul> <li>A network model in which computers or hardware devices directly exchange files without needing a hub/server to direct and manage the traffic</li> <li>\u201cEqual client\u201d system</li> </ul>"},{"location":"SLHL/08/1/#importance-of-standards","title":"Importance of standards","text":"<p>Syllabus points</p> <ul> <li>3.1.2 Outline the importance of standards in the construction of networks</li> </ul> <ul> <li>So parts can fit together and work together<ul> <li>All Ethernet cables fit into all hubs and switches etc.</li> </ul> </li> <li>So users can expect certain levels of performance etc.<ul> <li>A CAT-5 Ethernet cable allows data transfer at a certain bandwidth</li> </ul> </li> <li>So interacting parts do not interfere with each other<ul> <li>Different WiFi networks do not interfere with each other</li> </ul> </li> <li> <p>So equipment is safe, with electrical output etc.</p> <ul> <li>A modem will not overheat when plugged into either 110 Volt or 220 Volt sockets</li> </ul> </li> <li> <p>Provides common ground for manufacturers of networking products on which to build their systems</p> </li> <li>Interconnects products from various vendors</li> <li>Facilitates communication between devices</li> </ul>"},{"location":"SLHL/08/1/#layers-of-a-network","title":"Layers of a network","text":"<p>Syllabus points</p> <ul> <li>3.1.3 Describe how communication over networks is broken down into different layers</li> </ul> <p>Mnemonic:</p> <ul> <li>(bottom-up) People Don\u2019t Need Those Stupid Packets Anyway</li> <li>(top-down) All People Seem To Need Data Processing</li> </ul> Layer Name Description Example 7 Application Provides the ability for user applications to interact with the network HTTP, FTP, SMTP 6 Presentation Preparation of appropriate data representation, encryption/decryption and compression/decompression ASCII, JPEG, MPEG, SSL 5 Session Provides session management between applications NetBIOS, PPTP, RPC 4 Transport Provides reliable and sequential packet delivery through error correction and flow control TCP, UDP 3 Network Provides logical addressing and routing of packets across networks (determination of the path through the network the data will go) IP, ICMP, ARP 2 Data Link Provides physical addressing and error detection for packets Ethernet, PPP, ATM 1 Physical Provides physical topology and electrical or optical signalling Cables, connectors"},{"location":"SLHL/08/1/#networking-protocols","title":"Networking protocols","text":"<p>See also</p> <p>SL08.2 Data Transmission \u00a7 Protocols and data packets</p> <ul> <li>TCP/IP: the standard protocol for the Internet; a packet-switching protocol that resides in the Network and Transport layers of the OSI model</li> <li>UDP: a connectionless protocol that does not guarantee the delivery of packets</li> <li>IP address: a unique address that identifies a device on the Internet or a local network</li> </ul>"},{"location":"SLHL/08/1/#vpn-technologies","title":"VPN technologies","text":"<p>Syllabus points</p> <ul> <li>3.1.4 Identify the technologies required to provide a VPN</li> <li>3.1.5 Evaluate the use of a VPN</li> </ul>"},{"location":"SLHL/08/1/#vpn-hardware","title":"VPN hardware","text":"<ul> <li>Network Access Server: an access point to the Internet at both ends of the connection (e.g. router, gateway server)</li> <li>VPN Tunneling Server (PPTP server): allows PPTP tunnelling through the Internet</li> </ul>"},{"location":"SLHL/08/1/#vpn-software","title":"VPN software","text":"<ul> <li>Tunnelling: establishing and maintaining a logical network connection to transmit specially formatted data packets, which are encapsulated within some other protocol and will be de-encapsulated on the receiving side</li> <li>Encryption: encoding data so that only a computer with the right decoder will be able to read and use it</li> </ul>"},{"location":"SLHL/08/1/#vpn-protocols","title":"VPN protocols","text":"<ul> <li>Point-to-Point Tunneling Protocol (PPTP): one of the most common protocols used for controlling VPN sessions; developed by Microsoft and can be used by Windows machines</li> <li>Layer 2 Tunneling Protocol (L2TP): more secure; uses UDP; encrypts data using a strong 256-bit encryption system (so slower and takes more CPU power); created by Cisco and Microsoft</li> <li>Secure Sockets Layer (SSL): can be used with a standard web browser (not Windows-specific); does not require specialised servers</li> </ul>"},{"location":"SLHL/08/1/#use-of-vpn","title":"Use of VPN","text":"<ul> <li>Businesses/organisations<ul> <li>Advantages<ul> <li>Security: employees can process sensitive data securely from a remote site; preventing industrial espionage</li> <li>Remote work: allows people to work at home</li> <li>Cost savings: less expensive than building a physical WAN; cost savings on office space and travel if employees work from home</li> </ul> </li> <li>Disadvantages<ul> <li>Distractions: employees may be distracted when working from a remote environment (e.g. home chores, family) and less productive</li> <li>Less person-to-person contact: decreased efficiency for group projects and more interpersonal issues</li> </ul> </li> </ul> </li> <li>Individuals<ul> <li>Advantages<ul> <li>Stay-at-home parents: can work from home while taking care of children</li> <li>More healthy work environment: can take a break when needed</li> <li>Security: e-commerce transactions are encrypted</li> </ul> </li> <li>Disadvantages<ul> <li>Anti-social: less social interaction with colleagues</li> <li>Illegal uses of VPN (e.g. hacking, piracy, illegal downloading)</li> </ul> </li> </ul> </li> </ul>"},{"location":"SLHL/08/2/","title":"08.2 Data Transmission","text":""},{"location":"SLHL/08/2/#protocols-and-data-packets","title":"Protocols and data packets","text":"<p>Syllabus points</p> <ul> <li>3.1.6 Define the terms: protocol, data packet</li> <li>3.1.7 Explain why protocols are necessary</li> </ul> <ul> <li>Protocol: a set of rules/guidelines that help with interaction between individuals or devices</li> <li>Network protocol: an agreed-upon collection of rules that servers, computers and other devices must follow for the transmissions to be successful (e.g. how the data is to be formatted and packaged, whether or not data compression is allowed)</li> <li>Standards vs protocols<ul> <li>Standards: agreements made by people/organisations to allow a consistent approach by manufacturers or programmers (e.g. HTML)</li> <li>Protocols: sets of rules (designed by people) to allow different devices to communicate effectively (e.g. HTTP)</li> <li>Standards are about things while protocols are about processes</li> </ul> </li> <li>Data packets: a unit of data that is routed between an origin and a destination on a network<ul> <li>Composed of overheads (e.g. a header) and a payload (the actual data)</li> <li>Overhead includes source and destination addresses, the order of the packet, error-checking information, etc.</li> </ul> </li> </ul> <p></p>"},{"location":"SLHL/08/2/#necessity-of-protocols","title":"Necessity of protocols","text":"<ul> <li>Provide standard ways of communicating and interacting (ensure compatibility)</li> <li>Data integrity: ensure the overall completeness, accuracy and consistency of data<ul> <li>Error checking: detect noise or other impairments introduced into data while it is transmitted from source to destination</li> </ul> </li> <li>Flow control (speed of transmission): prevent a fast sender from overwhelming a slow receiver</li> <li>Deadlock prevention: when two nodes or processes are trying to access the same node at the same moment, causing neither to be able to proceed</li> <li>Congestion: when a node or link carries so much data that it may deteriorate network service quality, resulting in queuing delay, frame or data packet loss and the blocking of new connections</li> </ul>"},{"location":"SLHL/08/2/#speed-of-data-transmission","title":"Speed of data transmission","text":"<p>Syllabus points</p> <ul> <li>3.1.8 Explain why the speed of data transmission across a network can vary</li> </ul> <ul> <li>Constantly changing factors<ul> <li>Number of people (traffic)</li> <li>Concentration/geographic distribution of traffic</li> <li>Kind of activity (e.g. Netflix vs email - bigger files and more simultaneous connections)</li> <li>Interference/noise resulting in packets getting lost and needing to be resent</li> </ul> </li> <li>Non-changing factors (software/hardware)<ul> <li>Transmitting server and receiving client hardware (e.g. CPU, amount of RAM, speed of routers/switches/network cards)</li> <li>Transmission media (e.g. fibre optic cables, copper cables, wireless)</li> <li>Protocol: compression, speed (allowed by the protocol), congestion, security</li> <li>ISP: geographical distance, kind of transmission service, maximum speed</li> </ul> </li> </ul>"},{"location":"SLHL/08/2/#data-compression","title":"Data compression","text":"<p>Syllabus points</p> <ul> <li>3.1.9 Explain why compression of data is often necessary when transmitting across a network</li> </ul> <ul> <li>Compression: the process of reducing the size of a file by removing unnecessary data</li> <li>User-level compression: lossless (e.g. ZIP, PNG, GIF) or lossy (e.g. JPEG, MP3, MP4)</li> <li>Network-level compression: reduces the size of data frames to be transmitted over a network link to reduce the bandwidth required, prevent congestion, and increase the speed of transmission</li> </ul>"},{"location":"SLHL/08/2/#transmission-media","title":"Transmission media","text":"<p>Syllabus points</p> <ul> <li>3.1.10 Outline the characteristics of different transmission media</li> </ul> Speed Reliability Cost Security Metal - Twisted Pair (Ethernet) 100 Mbps - 10 Gbps Good Low Good Metal - Coaxial Slow - 10 Mbps Better Low Better Fiber Optic Up to 100 Gbps Best High (incl. set-up) Best Wireless 100 Mbps max. Not too bad, but\u2026 Not too bad Issues"},{"location":"SLHL/08/2/#packet-switching","title":"Packet switching","text":"<p>Syllabus points</p> <ul> <li>3.1.11 Explain how data is transmitted by packet switching</li> </ul> <ul> <li>Packet switching: breaking a message into packets that are routed individually to the destination, where they are reassembled into the original message</li> <li>Steps of packet switching<ol> <li>A file is broken up into packets of a fixed length and each packet is transmitted separately</li> <li>Each packet includes a packet number</li> <li>Packets are assembled and reordered at the destination</li> <li>Each packet has a counter which decrements as it passes through a node; after a certain number of hops, it is assumed the packet is lost and the packet is trashed</li> <li>Packet errors can occur as a result of collisions or interference; retransmission is requested in these cases</li> <li>Packet switching is suitable when small delays can be tolerated (i.e. email transmission), or the complete transmission doesn\u2019t have to happen together</li> </ol> </li> <li>Advantages<ul> <li>The transmission will not be broken if any one link is broken (can be routed through another link)</li> <li>Avoids congestion: more than one route can be used; faster overall network</li> <li>Cheaper for individuals: no need for dedicated lines</li> </ul> </li> </ul> <p></p>"},{"location":"SLHL/08/3/","title":"08.3 Wireless Networking","text":""},{"location":"SLHL/08/3/#advantages-and-disadvantages","title":"Advantages and disadvantages","text":"<p>Syllabus points</p> <ul> <li>3.1.12 Outline the advantages and disadvantages of wireless networks</li> </ul> <ul> <li>Advantages<ul> <li>Low cost<ul> <li>Uses unlicensed radio spectrum \u2192 free to use</li> <li>Setup costs are minimal \u2192 many affordable solutions available</li> </ul> </li> <li>Ease of Setup &amp; Expandability<ul> <li>LANs can be set up without cabling \u2192 saves money and space</li> <li>Offices do not need as many ports and new devices can be connected easily</li> </ul> </li> <li>Mobility &amp; Roaming<ul> <li>WiFi supports roaming between access points \u2192 can switch between routers automatically depending on which connection is best</li> <li>Global standards (eg. 802.11n)</li> <li>Can work in transit</li> </ul> </li> </ul> </li> <li>Disadvantages<ul> <li>Low Speed of Transmission<ul> <li>Much slower compared to wired networks</li> </ul> </li> <li>Reliability/Interference<ul> <li>2.4GHz spectrum is often crowded with other devices \u2192 electromagnetic interference</li> <li>Signals can be blocked by walls, etc.</li> <li>Limited range</li> </ul> </li> <li>Security<ul> <li>WEP: easily hacked encryption (solved by WPA2)</li> <li>Access Points can be targeted to steal data</li> </ul> </li> </ul> </li> </ul>"},{"location":"SLHL/08/3/#hardware-and-software-components","title":"Hardware and software components","text":"<p>Syllabus points</p> <ul> <li>3.1.13 Describe the hardware and software components of a wireless network</li> </ul>"},{"location":"SLHL/08/3/#hardware","title":"Hardware","text":"<ul> <li>Transmitting device<ul> <li>Wireless Access Point (AP)/Router: receives the Internet signal via a cable (e.g. Ethernet), then broadcasts the wireless signal, allowing multiple devices to connect to the Internet</li> <li>Wireless antenna: built into the wireless AP/router; sends radio wave transmissions on specific frequencies to receivers on other devices; significantly increases the communication range of the wireless radio signal</li> </ul> </li> <li>Receiving device<ul> <li>Wireless antenna: could be a short antenna or simply a wire</li> <li>Network Interface Card (NIC) and receiver: receives the radio waves and translates them into digital signals</li> </ul> </li> </ul>"},{"location":"SLHL/08/3/#software","title":"Software","text":"<ul> <li>Wireless drivers: software that allows the OS to communicate with the wireless hardware</li> <li>Wireless protocols (e.g. 802.11a, 802.11b, c, 802.11n, 802.11ac, 802.11ax)</li> <li>Network utilities provided by the OS</li> </ul>"},{"location":"SLHL/08/3/#characteristics-of-wireless-networks","title":"Characteristics of wireless networks","text":"<p>Syllabus points</p> <ul> <li>3.1.14 Describe the characteristics of wireless networks</li> </ul>"},{"location":"SLHL/08/3/#types-of-wireless-networks","title":"Types of wireless networks","text":"<ul> <li>Wi-Fi (Wireless Fidelity)<ul> <li>Also called Wireless LAN (WLAN): supplied via LAN</li> <li>Allows relatively slow to fast data transmissions (depending on the standard) - up to 1.3Gbps (802.11ac), but usually 54Mbps (802.11g)</li> <li>Backward compatible with older standards</li> <li>Small transmitting radius: suitable for homes (32m indoors)</li> </ul> </li> <li>WiMAX (Worldwide Interoperability for Microwave Access)<ul> <li>Lower speed than Wi-Fi and 3G (up to 40Mbps)</li> <li>Line of sight required between transmitter and receiver</li> <li>Large transmitting radius: designed for developing countries, suitable for cities (50km)</li> <li>Rivaled by Long Term Evolution (LTE)</li> </ul> </li> <li>3G (3rd Generation Mobile Communication Technology)<ul> <li>Lower speed (up to 15Mbps)</li> <li>For mobile devices (phones, tablets, etc.)</li> <li>Able to switch between technologies (2G, 3G, 4G)</li> </ul> </li> <li>4G (4th Generation Mobile Communication Technology)<ul> <li>Higher speed (up to 100Mbps)</li> </ul> </li> <li>5G (5th Generation Mobile Communication Technology)<ul> <li>Higher speed (up to 900Mbps)</li> <li>Lower range (requires more transmitters)</li> <li>Has issues with penetration through walls</li> </ul> </li> </ul>"},{"location":"SLHL/08/3/#methods-of-network-security","title":"Methods of network security","text":"<p>Syllabus points</p> <ul> <li>3.1.15 Describe the different methods of network security</li> <li>3.1.16 Evaluate the advantages and disadvantages of each method of network security</li> </ul> <p>Factors of security:</p> <ul> <li>Confidentiality</li> <li>Integrity (maintaining accuracy of data)</li> <li>Availability (e.g. DoS attacks)</li> </ul> <p>Methods of security:</p> <ul> <li>Authentication: is the user who they say they are?<ul> <li>One-factor authentication: password (something you know)</li> <li>Two-factor authentication: password + token (something you have)</li> <li>Three-factor authentication: password + token + biometric (something you are)</li> </ul> </li> <li>Encryption: scrambling data so that only the intended recipient can read it (symmetric or asymmetric)<ul> <li>Wireless Equivalent Privacy (WEP): weak encryption, easily hacked, superseded by WPA in 2003</li> <li>Wi-Fi Protected Access (WPA): strong encryption, uses Temporal Key Integrity Protocol (TKIP)</li> <li>WPA2: stronger encryption, uses Advanced Encryption Standard (AES), instructions can only come from someone who already has access the network</li> </ul> </li> <li>Firewall: a barrier between a trusted network and an untrusted network<ul> <li>Hardware, software, hybrid</li> <li>Controls incoming and outgoing network traffic</li> <li>Analyse data packets based on determined security rules</li> </ul> </li> <li>Media Access Control (MAC) filtering<ul> <li>Hard-coded unique identifier for each network device (managed by IEEE)</li> <li>Used to identify specific pieces of hardware</li> <li>MAC can be spoofed</li> </ul> </li> <li>Physical security: locked doors, security guards, etc.</li> </ul> <p>Advantages and disadvantages:</p> <ul> <li>Authentication<ul> <li>Advantages<ul> <li>Software solution (no extra cost)</li> <li>Access rights can be set for individual users</li> <li>User groups can be created to simplify access rights</li> </ul> </li> <li>Disadvantages<ul> <li>A user\u2019s credentials can be stolen (e.g. brute force attack)</li> <li>Does not protect against eavesdropping (intercepting messages in a network)</li> </ul> </li> </ul> </li> <li>Encryption<ul> <li>Advantages<ul> <li>Difficult to crack (especially AES)</li> <li>Software solution (no extra cost)</li> </ul> </li> <li>Disadvantages<ul> <li>Performance overhead (slower data transfer)</li> <li>Vulnerability will be discovered eventually and may be exploited if not updated</li> <li>Can be prone to hacking if weak or inconsistently implemented (e.g. WEP)</li> </ul> </li> </ul> </li> <li>Firewall<ul> <li>Advantages<ul> <li>User-level firewalls are often free (incorporated into OS)</li> <li>Easy to implement when intended for personal use</li> <li>Expert firewalls are difficult to bypass</li> </ul> </li> <li>Disadvantages<ul> <li>Performance overhead (slower data transfer)</li> <li>User-level firewalls can be breached by malware</li> <li>Expert firewalls are expensive and require expertise to maintain</li> </ul> </li> </ul> </li> </ul>"}]}